// Copyright (C) Canonical, Ltd.
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 3 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.
//

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        v5.28.3
// source: multipass/multipass.proto

package multipass

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type LaunchRequest_NetworkOptions_Mode int32

const (
	LaunchRequest_NetworkOptions_AUTO   LaunchRequest_NetworkOptions_Mode = 0
	LaunchRequest_NetworkOptions_MANUAL LaunchRequest_NetworkOptions_Mode = 1
)

// Enum value maps for LaunchRequest_NetworkOptions_Mode.
var (
	LaunchRequest_NetworkOptions_Mode_name = map[int32]string{
		0: "AUTO",
		1: "MANUAL",
	}
	LaunchRequest_NetworkOptions_Mode_value = map[string]int32{
		"AUTO":   0,
		"MANUAL": 1,
	}
)

func (x LaunchRequest_NetworkOptions_Mode) Enum() *LaunchRequest_NetworkOptions_Mode {
	p := new(LaunchRequest_NetworkOptions_Mode)
	*p = x
	return p
}

func (x LaunchRequest_NetworkOptions_Mode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LaunchRequest_NetworkOptions_Mode) Descriptor() protoreflect.EnumDescriptor {
	return file_multipass_multipass_proto_enumTypes[0].Descriptor()
}

func (LaunchRequest_NetworkOptions_Mode) Type() protoreflect.EnumType {
	return &file_multipass_multipass_proto_enumTypes[0]
}

func (x LaunchRequest_NetworkOptions_Mode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LaunchRequest_NetworkOptions_Mode.Descriptor instead.
func (LaunchRequest_NetworkOptions_Mode) EnumDescriptor() ([]byte, []int) {
	return file_multipass_multipass_proto_rawDescGZIP(), []int{0, 0, 0}
}

type LaunchError_ErrorCodes int32

const (
	LaunchError_OK                LaunchError_ErrorCodes = 0
	LaunchError_INVALID_MEM_SIZE  LaunchError_ErrorCodes = 1
	LaunchError_INVALID_DISK_SIZE LaunchError_ErrorCodes = 2
	LaunchError_INVALID_HOSTNAME  LaunchError_ErrorCodes = 3
	LaunchError_INVALID_NETWORK   LaunchError_ErrorCodes = 4
)

// Enum value maps for LaunchError_ErrorCodes.
var (
	LaunchError_ErrorCodes_name = map[int32]string{
		0: "OK",
		1: "INVALID_MEM_SIZE",
		2: "INVALID_DISK_SIZE",
		3: "INVALID_HOSTNAME",
		4: "INVALID_NETWORK",
	}
	LaunchError_ErrorCodes_value = map[string]int32{
		"OK":                0,
		"INVALID_MEM_SIZE":  1,
		"INVALID_DISK_SIZE": 2,
		"INVALID_HOSTNAME":  3,
		"INVALID_NETWORK":   4,
	}
)

func (x LaunchError_ErrorCodes) Enum() *LaunchError_ErrorCodes {
	p := new(LaunchError_ErrorCodes)
	*p = x
	return p
}

func (x LaunchError_ErrorCodes) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LaunchError_ErrorCodes) Descriptor() protoreflect.EnumDescriptor {
	return file_multipass_multipass_proto_enumTypes[1].Descriptor()
}

func (LaunchError_ErrorCodes) Type() protoreflect.EnumType {
	return &file_multipass_multipass_proto_enumTypes[1]
}

func (x LaunchError_ErrorCodes) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LaunchError_ErrorCodes.Descriptor instead.
func (LaunchError_ErrorCodes) EnumDescriptor() ([]byte, []int) {
	return file_multipass_multipass_proto_rawDescGZIP(), []int{1, 0}
}

type LaunchProgress_ProgressTypes int32

const (
	LaunchProgress_IMAGE   LaunchProgress_ProgressTypes = 0
	LaunchProgress_EXTRACT LaunchProgress_ProgressTypes = 1
	LaunchProgress_VERIFY  LaunchProgress_ProgressTypes = 2
	LaunchProgress_WAITING LaunchProgress_ProgressTypes = 3
)

// Enum value maps for LaunchProgress_ProgressTypes.
var (
	LaunchProgress_ProgressTypes_name = map[int32]string{
		0: "IMAGE",
		1: "EXTRACT",
		2: "VERIFY",
		3: "WAITING",
	}
	LaunchProgress_ProgressTypes_value = map[string]int32{
		"IMAGE":   0,
		"EXTRACT": 1,
		"VERIFY":  2,
		"WAITING": 3,
	}
)

func (x LaunchProgress_ProgressTypes) Enum() *LaunchProgress_ProgressTypes {
	p := new(LaunchProgress_ProgressTypes)
	*p = x
	return p
}

func (x LaunchProgress_ProgressTypes) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LaunchProgress_ProgressTypes) Descriptor() protoreflect.EnumDescriptor {
	return file_multipass_multipass_proto_enumTypes[2].Descriptor()
}

func (LaunchProgress_ProgressTypes) Type() protoreflect.EnumType {
	return &file_multipass_multipass_proto_enumTypes[2]
}

func (x LaunchProgress_ProgressTypes) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LaunchProgress_ProgressTypes.Descriptor instead.
func (LaunchProgress_ProgressTypes) EnumDescriptor() ([]byte, []int) {
	return file_multipass_multipass_proto_rawDescGZIP(), []int{2, 0}
}

type InstanceStatus_Status int32

const (
	InstanceStatus_UNKNOWN          InstanceStatus_Status = 0
	InstanceStatus_RUNNING          InstanceStatus_Status = 1
	InstanceStatus_STARTING         InstanceStatus_Status = 2
	InstanceStatus_RESTARTING       InstanceStatus_Status = 3
	InstanceStatus_STOPPED          InstanceStatus_Status = 4
	InstanceStatus_DELETED          InstanceStatus_Status = 5
	InstanceStatus_DELAYED_SHUTDOWN InstanceStatus_Status = 6
	InstanceStatus_SUSPENDING       InstanceStatus_Status = 7
	InstanceStatus_SUSPENDED        InstanceStatus_Status = 8
)

// Enum value maps for InstanceStatus_Status.
var (
	InstanceStatus_Status_name = map[int32]string{
		0: "UNKNOWN",
		1: "RUNNING",
		2: "STARTING",
		3: "RESTARTING",
		4: "STOPPED",
		5: "DELETED",
		6: "DELAYED_SHUTDOWN",
		7: "SUSPENDING",
		8: "SUSPENDED",
	}
	InstanceStatus_Status_value = map[string]int32{
		"UNKNOWN":          0,
		"RUNNING":          1,
		"STARTING":         2,
		"RESTARTING":       3,
		"STOPPED":          4,
		"DELETED":          5,
		"DELAYED_SHUTDOWN": 6,
		"SUSPENDING":       7,
		"SUSPENDED":        8,
	}
)

func (x InstanceStatus_Status) Enum() *InstanceStatus_Status {
	p := new(InstanceStatus_Status)
	*p = x
	return p
}

func (x InstanceStatus_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InstanceStatus_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_multipass_multipass_proto_enumTypes[3].Descriptor()
}

func (InstanceStatus_Status) Type() protoreflect.EnumType {
	return &file_multipass_multipass_proto_enumTypes[3]
}

func (x InstanceStatus_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InstanceStatus_Status.Descriptor instead.
func (InstanceStatus_Status) EnumDescriptor() ([]byte, []int) {
	return file_multipass_multipass_proto_rawDescGZIP(), []int{14, 0}
}

type MountRequest_MountType int32

const (
	MountRequest_CLASSIC MountRequest_MountType = 0
	MountRequest_NATIVE  MountRequest_MountType = 1
)

// Enum value maps for MountRequest_MountType.
var (
	MountRequest_MountType_name = map[int32]string{
		0: "CLASSIC",
		1: "NATIVE",
	}
	MountRequest_MountType_value = map[string]int32{
		"CLASSIC": 0,
		"NATIVE":  1,
	}
)

func (x MountRequest_MountType) Enum() *MountRequest_MountType {
	p := new(MountRequest_MountType)
	*p = x
	return p
}

func (x MountRequest_MountType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MountRequest_MountType) Descriptor() protoreflect.EnumDescriptor {
	return file_multipass_multipass_proto_enumTypes[4].Descriptor()
}

func (MountRequest_MountType) Type() protoreflect.EnumType {
	return &file_multipass_multipass_proto_enumTypes[4]
}

func (x MountRequest_MountType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MountRequest_MountType.Descriptor instead.
func (MountRequest_MountType) EnumDescriptor() ([]byte, []int) {
	return file_multipass_multipass_proto_rawDescGZIP(), []int{30, 0}
}

type StartError_ErrorCode int32

const (
	StartError_OK               StartError_ErrorCode = 0
	StartError_DOES_NOT_EXIST   StartError_ErrorCode = 1
	StartError_INSTANCE_DELETED StartError_ErrorCode = 2
	StartError_OTHER            StartError_ErrorCode = 3
)

// Enum value maps for StartError_ErrorCode.
var (
	StartError_ErrorCode_name = map[int32]string{
		0: "OK",
		1: "DOES_NOT_EXIST",
		2: "INSTANCE_DELETED",
		3: "OTHER",
	}
	StartError_ErrorCode_value = map[string]int32{
		"OK":               0,
		"DOES_NOT_EXIST":   1,
		"INSTANCE_DELETED": 2,
		"OTHER":            3,
	}
)

func (x StartError_ErrorCode) Enum() *StartError_ErrorCode {
	p := new(StartError_ErrorCode)
	*p = x
	return p
}

func (x StartError_ErrorCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StartError_ErrorCode) Descriptor() protoreflect.EnumDescriptor {
	return file_multipass_multipass_proto_enumTypes[5].Descriptor()
}

func (StartError_ErrorCode) Type() protoreflect.EnumType {
	return &file_multipass_multipass_proto_enumTypes[5]
}

func (x StartError_ErrorCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StartError_ErrorCode.Descriptor instead.
func (StartError_ErrorCode) EnumDescriptor() ([]byte, []int) {
	return file_multipass_multipass_proto_rawDescGZIP(), []int{40, 0}
}

type LaunchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstanceName       string                          `protobuf:"bytes,1,opt,name=instance_name,json=instanceName,proto3" json:"instance_name,omitempty"`
	Image              string                          `protobuf:"bytes,2,opt,name=image,proto3" json:"image,omitempty"`
	KernelName         string                          `protobuf:"bytes,3,opt,name=kernel_name,json=kernelName,proto3" json:"kernel_name,omitempty"`
	NumCores           int32                           `protobuf:"varint,4,opt,name=num_cores,json=numCores,proto3" json:"num_cores,omitempty"`
	MemSize            string                          `protobuf:"bytes,5,opt,name=mem_size,json=memSize,proto3" json:"mem_size,omitempty"`       // units?
	DiskSpace          string                          `protobuf:"bytes,6,opt,name=disk_space,json=diskSpace,proto3" json:"disk_space,omitempty"` // units?
	TimeZone           string                          `protobuf:"bytes,7,opt,name=time_zone,json=timeZone,proto3" json:"time_zone,omitempty"`
	CloudInitUserData  string                          `protobuf:"bytes,8,opt,name=cloud_init_user_data,json=cloudInitUserData,proto3" json:"cloud_init_user_data,omitempty"`
	RemoteName         string                          `protobuf:"bytes,9,opt,name=remote_name,json=remoteName,proto3" json:"remote_name,omitempty"`
	VerbosityLevel     int32                           `protobuf:"varint,11,opt,name=verbosity_level,json=verbosityLevel,proto3" json:"verbosity_level,omitempty"`
	NetworkOptions     []*LaunchRequest_NetworkOptions `protobuf:"bytes,12,rep,name=network_options,json=networkOptions,proto3" json:"network_options,omitempty"`
	PermissionToBridge bool                            `protobuf:"varint,13,opt,name=permission_to_bridge,json=permissionToBridge,proto3" json:"permission_to_bridge,omitempty"`
	Timeout            int32                           `protobuf:"varint,14,opt,name=timeout,proto3" json:"timeout,omitempty"`
	Password           string                          `protobuf:"bytes,15,opt,name=password,proto3" json:"password,omitempty"`
}

func (x *LaunchRequest) Reset() {
	*x = LaunchRequest{}
	mi := &file_multipass_multipass_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LaunchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LaunchRequest) ProtoMessage() {}

func (x *LaunchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_multipass_multipass_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LaunchRequest.ProtoReflect.Descriptor instead.
func (*LaunchRequest) Descriptor() ([]byte, []int) {
	return file_multipass_multipass_proto_rawDescGZIP(), []int{0}
}

func (x *LaunchRequest) GetInstanceName() string {
	if x != nil {
		return x.InstanceName
	}
	return ""
}

func (x *LaunchRequest) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *LaunchRequest) GetKernelName() string {
	if x != nil {
		return x.KernelName
	}
	return ""
}

func (x *LaunchRequest) GetNumCores() int32 {
	if x != nil {
		return x.NumCores
	}
	return 0
}

func (x *LaunchRequest) GetMemSize() string {
	if x != nil {
		return x.MemSize
	}
	return ""
}

func (x *LaunchRequest) GetDiskSpace() string {
	if x != nil {
		return x.DiskSpace
	}
	return ""
}

func (x *LaunchRequest) GetTimeZone() string {
	if x != nil {
		return x.TimeZone
	}
	return ""
}

func (x *LaunchRequest) GetCloudInitUserData() string {
	if x != nil {
		return x.CloudInitUserData
	}
	return ""
}

func (x *LaunchRequest) GetRemoteName() string {
	if x != nil {
		return x.RemoteName
	}
	return ""
}

func (x *LaunchRequest) GetVerbosityLevel() int32 {
	if x != nil {
		return x.VerbosityLevel
	}
	return 0
}

func (x *LaunchRequest) GetNetworkOptions() []*LaunchRequest_NetworkOptions {
	if x != nil {
		return x.NetworkOptions
	}
	return nil
}

func (x *LaunchRequest) GetPermissionToBridge() bool {
	if x != nil {
		return x.PermissionToBridge
	}
	return false
}

func (x *LaunchRequest) GetTimeout() int32 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

func (x *LaunchRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type LaunchError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrorCodes []LaunchError_ErrorCodes `protobuf:"varint,1,rep,packed,name=error_codes,json=errorCodes,proto3,enum=multipass.LaunchError_ErrorCodes" json:"error_codes,omitempty"`
}

func (x *LaunchError) Reset() {
	*x = LaunchError{}
	mi := &file_multipass_multipass_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LaunchError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LaunchError) ProtoMessage() {}

func (x *LaunchError) ProtoReflect() protoreflect.Message {
	mi := &file_multipass_multipass_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LaunchError.ProtoReflect.Descriptor instead.
func (*LaunchError) Descriptor() ([]byte, []int) {
	return file_multipass_multipass_proto_rawDescGZIP(), []int{1}
}

func (x *LaunchError) GetErrorCodes() []LaunchError_ErrorCodes {
	if x != nil {
		return x.ErrorCodes
	}
	return nil
}

type LaunchProgress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type            LaunchProgress_ProgressTypes `protobuf:"varint,1,opt,name=type,proto3,enum=multipass.LaunchProgress_ProgressTypes" json:"type,omitempty"`
	PercentComplete string                       `protobuf:"bytes,2,opt,name=percent_complete,json=percentComplete,proto3" json:"percent_complete,omitempty"`
}

func (x *LaunchProgress) Reset() {
	*x = LaunchProgress{}
	mi := &file_multipass_multipass_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LaunchProgress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LaunchProgress) ProtoMessage() {}

func (x *LaunchProgress) ProtoReflect() protoreflect.Message {
	mi := &file_multipass_multipass_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LaunchProgress.ProtoReflect.Descriptor instead.
func (*LaunchProgress) Descriptor() ([]byte, []int) {
	return file_multipass_multipass_proto_rawDescGZIP(), []int{2}
}

func (x *LaunchProgress) GetType() LaunchProgress_ProgressTypes {
	if x != nil {
		return x.Type
	}
	return LaunchProgress_IMAGE
}

func (x *LaunchProgress) GetPercentComplete() string {
	if x != nil {
		return x.PercentComplete
	}
	return ""
}

type UpdateInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version     string `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	Url         string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	Title       string `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *UpdateInfo) Reset() {
	*x = UpdateInfo{}
	mi := &file_multipass_multipass_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateInfo) ProtoMessage() {}

func (x *UpdateInfo) ProtoReflect() protoreflect.Message {
	mi := &file_multipass_multipass_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateInfo.ProtoReflect.Descriptor instead.
func (*UpdateInfo) Descriptor() ([]byte, []int) {
	return file_multipass_multipass_proto_rawDescGZIP(), []int{3}
}

func (x *UpdateInfo) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *UpdateInfo) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *UpdateInfo) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *UpdateInfo) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type LaunchReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to CreateOneof:
	//
	//	*LaunchReply_VmInstanceName
	//	*LaunchReply_LaunchProgress
	//	*LaunchReply_CreateMessage
	CreateOneof           isLaunchReply_CreateOneof `protobuf_oneof:"create_oneof"`
	LogLine               string                    `protobuf:"bytes,6,opt,name=log_line,json=logLine,proto3" json:"log_line,omitempty"`
	UpdateInfo            *UpdateInfo               `protobuf:"bytes,7,opt,name=update_info,json=updateInfo,proto3" json:"update_info,omitempty"`
	ReplyMessage          string                    `protobuf:"bytes,8,opt,name=reply_message,json=replyMessage,proto3" json:"reply_message,omitempty"`
	NetsNeedBridging      []string                  `protobuf:"bytes,9,rep,name=nets_need_bridging,json=netsNeedBridging,proto3" json:"nets_need_bridging,omitempty"`
	AliasesToBeCreated    []*LaunchReply_Alias      `protobuf:"bytes,10,rep,name=aliases_to_be_created,json=aliasesToBeCreated,proto3" json:"aliases_to_be_created,omitempty"`
	WorkspacesToBeCreated []string                  `protobuf:"bytes,11,rep,name=workspaces_to_be_created,json=workspacesToBeCreated,proto3" json:"workspaces_to_be_created,omitempty"`
	PasswordRequested     bool                      `protobuf:"varint,12,opt,name=password_requested,json=passwordRequested,proto3" json:"password_requested,omitempty"`
}

func (x *LaunchReply) Reset() {
	*x = LaunchReply{}
	mi := &file_multipass_multipass_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LaunchReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LaunchReply) ProtoMessage() {}

func (x *LaunchReply) ProtoReflect() protoreflect.Message {
	mi := &file_multipass_multipass_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LaunchReply.ProtoReflect.Descriptor instead.
func (*LaunchReply) Descriptor() ([]byte, []int) {
	return file_multipass_multipass_proto_rawDescGZIP(), []int{4}
}

func (m *LaunchReply) GetCreateOneof() isLaunchReply_CreateOneof {
	if m != nil {
		return m.CreateOneof
	}
	return nil
}

func (x *LaunchReply) GetVmInstanceName() string {
	if x, ok := x.GetCreateOneof().(*LaunchReply_VmInstanceName); ok {
		return x.VmInstanceName
	}
	return ""
}

func (x *LaunchReply) GetLaunchProgress() *LaunchProgress {
	if x, ok := x.GetCreateOneof().(*LaunchReply_LaunchProgress); ok {
		return x.LaunchProgress
	}
	return nil
}

func (x *LaunchReply) GetCreateMessage() string {
	if x, ok := x.GetCreateOneof().(*LaunchReply_CreateMessage); ok {
		return x.CreateMessage
	}
	return ""
}

func (x *LaunchReply) GetLogLine() string {
	if x != nil {
		return x.LogLine
	}
	return ""
}

func (x *LaunchReply) GetUpdateInfo() *UpdateInfo {
	if x != nil {
		return x.UpdateInfo
	}
	return nil
}

func (x *LaunchReply) GetReplyMessage() string {
	if x != nil {
		return x.ReplyMessage
	}
	return ""
}

func (x *LaunchReply) GetNetsNeedBridging() []string {
	if x != nil {
		return x.NetsNeedBridging
	}
	return nil
}

func (x *LaunchReply) GetAliasesToBeCreated() []*LaunchReply_Alias {
	if x != nil {
		return x.AliasesToBeCreated
	}
	return nil
}

func (x *LaunchReply) GetWorkspacesToBeCreated() []string {
	if x != nil {
		return x.WorkspacesToBeCreated
	}
	return nil
}

func (x *LaunchReply) GetPasswordRequested() bool {
	if x != nil {
		return x.PasswordRequested
	}
	return false
}

type isLaunchReply_CreateOneof interface {
	isLaunchReply_CreateOneof()
}

type LaunchReply_VmInstanceName struct {
	VmInstanceName string `protobuf:"bytes,1,opt,name=vm_instance_name,json=vmInstanceName,proto3,oneof"`
}

type LaunchReply_LaunchProgress struct {
	LaunchProgress *LaunchProgress `protobuf:"bytes,2,opt,name=launch_progress,json=launchProgress,proto3,oneof"`
}

type LaunchReply_CreateMessage struct {
	CreateMessage string `protobuf:"bytes,3,opt,name=create_message,json=createMessage,proto3,oneof"`
}

func (*LaunchReply_VmInstanceName) isLaunchReply_CreateOneof() {}

func (*LaunchReply_LaunchProgress) isLaunchReply_CreateOneof() {}

func (*LaunchReply_CreateMessage) isLaunchReply_CreateOneof() {}

type PurgeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VerbosityLevel int32 `protobuf:"varint,1,opt,name=verbosity_level,json=verbosityLevel,proto3" json:"verbosity_level,omitempty"`
}

func (x *PurgeRequest) Reset() {
	*x = PurgeRequest{}
	mi := &file_multipass_multipass_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PurgeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PurgeRequest) ProtoMessage() {}

func (x *PurgeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_multipass_multipass_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PurgeRequest.ProtoReflect.Descriptor instead.
func (*PurgeRequest) Descriptor() ([]byte, []int) {
	return file_multipass_multipass_proto_rawDescGZIP(), []int{5}
}

func (x *PurgeRequest) GetVerbosityLevel() int32 {
	if x != nil {
		return x.VerbosityLevel
	}
	return 0
}

type PurgeReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LogLine         string   `protobuf:"bytes,1,opt,name=log_line,json=logLine,proto3" json:"log_line,omitempty"`
	PurgedInstances []string `protobuf:"bytes,2,rep,name=purged_instances,json=purgedInstances,proto3" json:"purged_instances,omitempty"`
}

func (x *PurgeReply) Reset() {
	*x = PurgeReply{}
	mi := &file_multipass_multipass_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PurgeReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PurgeReply) ProtoMessage() {}

func (x *PurgeReply) ProtoReflect() protoreflect.Message {
	mi := &file_multipass_multipass_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PurgeReply.ProtoReflect.Descriptor instead.
func (*PurgeReply) Descriptor() ([]byte, []int) {
	return file_multipass_multipass_proto_rawDescGZIP(), []int{6}
}

func (x *PurgeReply) GetLogLine() string {
	if x != nil {
		return x.LogLine
	}
	return ""
}

func (x *PurgeReply) GetPurgedInstances() []string {
	if x != nil {
		return x.PurgedInstances
	}
	return nil
}

type FindRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SearchString                 string `protobuf:"bytes,1,opt,name=search_string,json=searchString,proto3" json:"search_string,omitempty"`
	RemoteName                   string `protobuf:"bytes,2,opt,name=remote_name,json=remoteName,proto3" json:"remote_name,omitempty"`
	VerbosityLevel               int32  `protobuf:"varint,3,opt,name=verbosity_level,json=verbosityLevel,proto3" json:"verbosity_level,omitempty"`
	AllowUnsupported             bool   `protobuf:"varint,4,opt,name=allow_unsupported,json=allowUnsupported,proto3" json:"allow_unsupported,omitempty"`
	ShowImages                   bool   `protobuf:"varint,5,opt,name=show_images,json=showImages,proto3" json:"show_images,omitempty"`
	ShowBlueprints               bool   `protobuf:"varint,6,opt,name=show_blueprints,json=showBlueprints,proto3" json:"show_blueprints,omitempty"`
	ForceManifestNetworkDownload bool   `protobuf:"varint,7,opt,name=force_manifest_network_download,json=forceManifestNetworkDownload,proto3" json:"force_manifest_network_download,omitempty"`
}

func (x *FindRequest) Reset() {
	*x = FindRequest{}
	mi := &file_multipass_multipass_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FindRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindRequest) ProtoMessage() {}

func (x *FindRequest) ProtoReflect() protoreflect.Message {
	mi := &file_multipass_multipass_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindRequest.ProtoReflect.Descriptor instead.
func (*FindRequest) Descriptor() ([]byte, []int) {
	return file_multipass_multipass_proto_rawDescGZIP(), []int{7}
}

func (x *FindRequest) GetSearchString() string {
	if x != nil {
		return x.SearchString
	}
	return ""
}

func (x *FindRequest) GetRemoteName() string {
	if x != nil {
		return x.RemoteName
	}
	return ""
}

func (x *FindRequest) GetVerbosityLevel() int32 {
	if x != nil {
		return x.VerbosityLevel
	}
	return 0
}

func (x *FindRequest) GetAllowUnsupported() bool {
	if x != nil {
		return x.AllowUnsupported
	}
	return false
}

func (x *FindRequest) GetShowImages() bool {
	if x != nil {
		return x.ShowImages
	}
	return false
}

func (x *FindRequest) GetShowBlueprints() bool {
	if x != nil {
		return x.ShowBlueprints
	}
	return false
}

func (x *FindRequest) GetForceManifestNetworkDownload() bool {
	if x != nil {
		return x.ForceManifestNetworkDownload
	}
	return false
}

type FindReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShowImages     bool                   `protobuf:"varint,1,opt,name=show_images,json=showImages,proto3" json:"show_images,omitempty"`
	ShowBlueprints bool                   `protobuf:"varint,2,opt,name=show_blueprints,json=showBlueprints,proto3" json:"show_blueprints,omitempty"`
	ImagesInfo     []*FindReply_ImageInfo `protobuf:"bytes,3,rep,name=images_info,json=imagesInfo,proto3" json:"images_info,omitempty"`
	BlueprintsInfo []*FindReply_ImageInfo `protobuf:"bytes,4,rep,name=blueprints_info,json=blueprintsInfo,proto3" json:"blueprints_info,omitempty"`
	LogLine        string                 `protobuf:"bytes,5,opt,name=log_line,json=logLine,proto3" json:"log_line,omitempty"`
}

func (x *FindReply) Reset() {
	*x = FindReply{}
	mi := &file_multipass_multipass_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FindReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindReply) ProtoMessage() {}

func (x *FindReply) ProtoReflect() protoreflect.Message {
	mi := &file_multipass_multipass_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindReply.ProtoReflect.Descriptor instead.
func (*FindReply) Descriptor() ([]byte, []int) {
	return file_multipass_multipass_proto_rawDescGZIP(), []int{8}
}

func (x *FindReply) GetShowImages() bool {
	if x != nil {
		return x.ShowImages
	}
	return false
}

func (x *FindReply) GetShowBlueprints() bool {
	if x != nil {
		return x.ShowBlueprints
	}
	return false
}

func (x *FindReply) GetImagesInfo() []*FindReply_ImageInfo {
	if x != nil {
		return x.ImagesInfo
	}
	return nil
}

func (x *FindReply) GetBlueprintsInfo() []*FindReply_ImageInfo {
	if x != nil {
		return x.BlueprintsInfo
	}
	return nil
}

func (x *FindReply) GetLogLine() string {
	if x != nil {
		return x.LogLine
	}
	return ""
}

type InstanceSnapshotPair struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstanceName string  `protobuf:"bytes,1,opt,name=instance_name,json=instanceName,proto3" json:"instance_name,omitempty"`
	SnapshotName *string `protobuf:"bytes,2,opt,name=snapshot_name,json=snapshotName,proto3,oneof" json:"snapshot_name,omitempty"` // if this is present, the msg specifies a snapshot; otherwise, an instance
}

func (x *InstanceSnapshotPair) Reset() {
	*x = InstanceSnapshotPair{}
	mi := &file_multipass_multipass_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InstanceSnapshotPair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstanceSnapshotPair) ProtoMessage() {}

func (x *InstanceSnapshotPair) ProtoReflect() protoreflect.Message {
	mi := &file_multipass_multipass_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstanceSnapshotPair.ProtoReflect.Descriptor instead.
func (*InstanceSnapshotPair) Descriptor() ([]byte, []int) {
	return file_multipass_multipass_proto_rawDescGZIP(), []int{9}
}

func (x *InstanceSnapshotPair) GetInstanceName() string {
	if x != nil {
		return x.InstanceName
	}
	return ""
}

func (x *InstanceSnapshotPair) GetSnapshotName() string {
	if x != nil && x.SnapshotName != nil {
		return *x.SnapshotName
	}
	return ""
}

type InfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstanceSnapshotPairs []*InstanceSnapshotPair `protobuf:"bytes,1,rep,name=instance_snapshot_pairs,json=instanceSnapshotPairs,proto3" json:"instance_snapshot_pairs,omitempty"`
	VerbosityLevel        int32                   `protobuf:"varint,3,opt,name=verbosity_level,json=verbosityLevel,proto3" json:"verbosity_level,omitempty"`
	NoRuntimeInformation  bool                    `protobuf:"varint,4,opt,name=no_runtime_information,json=noRuntimeInformation,proto3" json:"no_runtime_information,omitempty"`
	Snapshots             bool                    `protobuf:"varint,5,opt,name=snapshots,proto3" json:"snapshots,omitempty"`
}

func (x *InfoRequest) Reset() {
	*x = InfoRequest{}
	mi := &file_multipass_multipass_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InfoRequest) ProtoMessage() {}

func (x *InfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_multipass_multipass_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InfoRequest.ProtoReflect.Descriptor instead.
func (*InfoRequest) Descriptor() ([]byte, []int) {
	return file_multipass_multipass_proto_rawDescGZIP(), []int{10}
}

func (x *InfoRequest) GetInstanceSnapshotPairs() []*InstanceSnapshotPair {
	if x != nil {
		return x.InstanceSnapshotPairs
	}
	return nil
}

func (x *InfoRequest) GetVerbosityLevel() int32 {
	if x != nil {
		return x.VerbosityLevel
	}
	return 0
}

func (x *InfoRequest) GetNoRuntimeInformation() bool {
	if x != nil {
		return x.NoRuntimeInformation
	}
	return false
}

func (x *InfoRequest) GetSnapshots() bool {
	if x != nil {
		return x.Snapshots
	}
	return false
}

type IdMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HostId     int32 `protobuf:"varint,1,opt,name=host_id,json=hostId,proto3" json:"host_id,omitempty"`
	InstanceId int32 `protobuf:"varint,2,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
}

func (x *IdMap) Reset() {
	*x = IdMap{}
	mi := &file_multipass_multipass_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IdMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdMap) ProtoMessage() {}

func (x *IdMap) ProtoReflect() protoreflect.Message {
	mi := &file_multipass_multipass_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdMap.ProtoReflect.Descriptor instead.
func (*IdMap) Descriptor() ([]byte, []int) {
	return file_multipass_multipass_proto_rawDescGZIP(), []int{11}
}

func (x *IdMap) GetHostId() int32 {
	if x != nil {
		return x.HostId
	}
	return 0
}

func (x *IdMap) GetInstanceId() int32 {
	if x != nil {
		return x.InstanceId
	}
	return 0
}

type MountMaps struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UidMappings []*IdMap `protobuf:"bytes,1,rep,name=uid_mappings,json=uidMappings,proto3" json:"uid_mappings,omitempty"`
	GidMappings []*IdMap `protobuf:"bytes,2,rep,name=gid_mappings,json=gidMappings,proto3" json:"gid_mappings,omitempty"`
}

func (x *MountMaps) Reset() {
	*x = MountMaps{}
	mi := &file_multipass_multipass_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MountMaps) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MountMaps) ProtoMessage() {}

func (x *MountMaps) ProtoReflect() protoreflect.Message {
	mi := &file_multipass_multipass_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MountMaps.ProtoReflect.Descriptor instead.
func (*MountMaps) Descriptor() ([]byte, []int) {
	return file_multipass_multipass_proto_rawDescGZIP(), []int{12}
}

func (x *MountMaps) GetUidMappings() []*IdMap {
	if x != nil {
		return x.UidMappings
	}
	return nil
}

func (x *MountMaps) GetGidMappings() []*IdMap {
	if x != nil {
		return x.GidMappings
	}
	return nil
}

type MountInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LongestPathLen uint32                  `protobuf:"varint,1,opt,name=longest_path_len,json=longestPathLen,proto3" json:"longest_path_len,omitempty"`
	MountPaths     []*MountInfo_MountPaths `protobuf:"bytes,2,rep,name=mount_paths,json=mountPaths,proto3" json:"mount_paths,omitempty"`
}

func (x *MountInfo) Reset() {
	*x = MountInfo{}
	mi := &file_multipass_multipass_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MountInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MountInfo) ProtoMessage() {}

func (x *MountInfo) ProtoReflect() protoreflect.Message {
	mi := &file_multipass_multipass_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MountInfo.ProtoReflect.Descriptor instead.
func (*MountInfo) Descriptor() ([]byte, []int) {
	return file_multipass_multipass_proto_rawDescGZIP(), []int{13}
}

func (x *MountInfo) GetLongestPathLen() uint32 {
	if x != nil {
		return x.LongestPathLen
	}
	return 0
}

func (x *MountInfo) GetMountPaths() []*MountInfo_MountPaths {
	if x != nil {
		return x.MountPaths
	}
	return nil
}

type InstanceStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status InstanceStatus_Status `protobuf:"varint,1,opt,name=status,proto3,enum=multipass.InstanceStatus_Status" json:"status,omitempty"`
}

func (x *InstanceStatus) Reset() {
	*x = InstanceStatus{}
	mi := &file_multipass_multipass_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InstanceStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstanceStatus) ProtoMessage() {}

func (x *InstanceStatus) ProtoReflect() protoreflect.Message {
	mi := &file_multipass_multipass_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstanceStatus.ProtoReflect.Descriptor instead.
func (*InstanceStatus) Descriptor() ([]byte, []int) {
	return file_multipass_multipass_proto_rawDescGZIP(), []int{14}
}

func (x *InstanceStatus) GetStatus() InstanceStatus_Status {
	if x != nil {
		return x.Status
	}
	return InstanceStatus_UNKNOWN
}

type InstanceDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ImageRelease      string                 `protobuf:"bytes,1,opt,name=image_release,json=imageRelease,proto3" json:"image_release,omitempty"`
	CurrentRelease    string                 `protobuf:"bytes,2,opt,name=current_release,json=currentRelease,proto3" json:"current_release,omitempty"`
	Id                string                 `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	Load              string                 `protobuf:"bytes,4,opt,name=load,proto3" json:"load,omitempty"`
	MemoryUsage       string                 `protobuf:"bytes,5,opt,name=memory_usage,json=memoryUsage,proto3" json:"memory_usage,omitempty"`
	DiskUsage         string                 `protobuf:"bytes,6,opt,name=disk_usage,json=diskUsage,proto3" json:"disk_usage,omitempty"`
	Ipv4              []string               `protobuf:"bytes,7,rep,name=ipv4,proto3" json:"ipv4,omitempty"`
	Ipv6              []string               `protobuf:"bytes,8,rep,name=ipv6,proto3" json:"ipv6,omitempty"`
	NumSnapshots      *int32                 `protobuf:"varint,9,opt,name=num_snapshots,json=numSnapshots,proto3,oneof" json:"num_snapshots,omitempty"`
	CpuTimes          string                 `protobuf:"bytes,10,opt,name=cpu_times,json=cpuTimes,proto3" json:"cpu_times,omitempty"`
	Uptime            string                 `protobuf:"bytes,11,opt,name=uptime,proto3" json:"uptime,omitempty"`
	CreationTimestamp *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=creation_timestamp,json=creationTimestamp,proto3" json:"creation_timestamp,omitempty"`
}

func (x *InstanceDetails) Reset() {
	*x = InstanceDetails{}
	mi := &file_multipass_multipass_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InstanceDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstanceDetails) ProtoMessage() {}

func (x *InstanceDetails) ProtoReflect() protoreflect.Message {
	mi := &file_multipass_multipass_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstanceDetails.ProtoReflect.Descriptor instead.
func (*InstanceDetails) Descriptor() ([]byte, []int) {
	return file_multipass_multipass_proto_rawDescGZIP(), []int{15}
}

func (x *InstanceDetails) GetImageRelease() string {
	if x != nil {
		return x.ImageRelease
	}
	return ""
}

func (x *InstanceDetails) GetCurrentRelease() string {
	if x != nil {
		return x.CurrentRelease
	}
	return ""
}

func (x *InstanceDetails) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *InstanceDetails) GetLoad() string {
	if x != nil {
		return x.Load
	}
	return ""
}

func (x *InstanceDetails) GetMemoryUsage() string {
	if x != nil {
		return x.MemoryUsage
	}
	return ""
}

func (x *InstanceDetails) GetDiskUsage() string {
	if x != nil {
		return x.DiskUsage
	}
	return ""
}

func (x *InstanceDetails) GetIpv4() []string {
	if x != nil {
		return x.Ipv4
	}
	return nil
}

func (x *InstanceDetails) GetIpv6() []string {
	if x != nil {
		return x.Ipv6
	}
	return nil
}

func (x *InstanceDetails) GetNumSnapshots() int32 {
	if x != nil && x.NumSnapshots != nil {
		return *x.NumSnapshots
	}
	return 0
}

func (x *InstanceDetails) GetCpuTimes() string {
	if x != nil {
		return x.CpuTimes
	}
	return ""
}

func (x *InstanceDetails) GetUptime() string {
	if x != nil {
		return x.Uptime
	}
	return ""
}

func (x *InstanceDetails) GetCreationTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.CreationTimestamp
	}
	return nil
}

type SnapshotFundamentals struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SnapshotName      string                 `protobuf:"bytes,1,opt,name=snapshot_name,json=snapshotName,proto3" json:"snapshot_name,omitempty"`
	Parent            string                 `protobuf:"bytes,2,opt,name=parent,proto3" json:"parent,omitempty"`
	Comment           string                 `protobuf:"bytes,3,opt,name=comment,proto3" json:"comment,omitempty"`
	CreationTimestamp *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=creation_timestamp,json=creationTimestamp,proto3" json:"creation_timestamp,omitempty"`
}

func (x *SnapshotFundamentals) Reset() {
	*x = SnapshotFundamentals{}
	mi := &file_multipass_multipass_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SnapshotFundamentals) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnapshotFundamentals) ProtoMessage() {}

func (x *SnapshotFundamentals) ProtoReflect() protoreflect.Message {
	mi := &file_multipass_multipass_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnapshotFundamentals.ProtoReflect.Descriptor instead.
func (*SnapshotFundamentals) Descriptor() ([]byte, []int) {
	return file_multipass_multipass_proto_rawDescGZIP(), []int{16}
}

func (x *SnapshotFundamentals) GetSnapshotName() string {
	if x != nil {
		return x.SnapshotName
	}
	return ""
}

func (x *SnapshotFundamentals) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *SnapshotFundamentals) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *SnapshotFundamentals) GetCreationTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.CreationTimestamp
	}
	return nil
}

type SnapshotDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fundamentals *SnapshotFundamentals `protobuf:"bytes,1,opt,name=fundamentals,proto3" json:"fundamentals,omitempty"`
	Size         string                `protobuf:"bytes,2,opt,name=size,proto3" json:"size,omitempty"`
	Children     []string              `protobuf:"bytes,4,rep,name=children,proto3" json:"children,omitempty"`
}

func (x *SnapshotDetails) Reset() {
	*x = SnapshotDetails{}
	mi := &file_multipass_multipass_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SnapshotDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnapshotDetails) ProtoMessage() {}

func (x *SnapshotDetails) ProtoReflect() protoreflect.Message {
	mi := &file_multipass_multipass_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnapshotDetails.ProtoReflect.Descriptor instead.
func (*SnapshotDetails) Descriptor() ([]byte, []int) {
	return file_multipass_multipass_proto_rawDescGZIP(), []int{17}
}

func (x *SnapshotDetails) GetFundamentals() *SnapshotFundamentals {
	if x != nil {
		return x.Fundamentals
	}
	return nil
}

func (x *SnapshotDetails) GetSize() string {
	if x != nil {
		return x.Size
	}
	return ""
}

func (x *SnapshotDetails) GetChildren() []string {
	if x != nil {
		return x.Children
	}
	return nil
}

type DetailedInfoItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name           string          `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	InstanceStatus *InstanceStatus `protobuf:"bytes,2,opt,name=instance_status,json=instanceStatus,proto3" json:"instance_status,omitempty"`
	MemoryTotal    string          `protobuf:"bytes,3,opt,name=memory_total,json=memoryTotal,proto3" json:"memory_total,omitempty"`
	DiskTotal      string          `protobuf:"bytes,4,opt,name=disk_total,json=diskTotal,proto3" json:"disk_total,omitempty"`
	CpuCount       string          `protobuf:"bytes,5,opt,name=cpu_count,json=cpuCount,proto3" json:"cpu_count,omitempty"`
	MountInfo      *MountInfo      `protobuf:"bytes,6,opt,name=mount_info,json=mountInfo,proto3" json:"mount_info,omitempty"`
	// Types that are assignable to ExtraInfo:
	//
	//	*DetailedInfoItem_InstanceInfo
	//	*DetailedInfoItem_SnapshotInfo
	ExtraInfo isDetailedInfoItem_ExtraInfo `protobuf_oneof:"extra_info"`
}

func (x *DetailedInfoItem) Reset() {
	*x = DetailedInfoItem{}
	mi := &file_multipass_multipass_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DetailedInfoItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DetailedInfoItem) ProtoMessage() {}

func (x *DetailedInfoItem) ProtoReflect() protoreflect.Message {
	mi := &file_multipass_multipass_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DetailedInfoItem.ProtoReflect.Descriptor instead.
func (*DetailedInfoItem) Descriptor() ([]byte, []int) {
	return file_multipass_multipass_proto_rawDescGZIP(), []int{18}
}

func (x *DetailedInfoItem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DetailedInfoItem) GetInstanceStatus() *InstanceStatus {
	if x != nil {
		return x.InstanceStatus
	}
	return nil
}

func (x *DetailedInfoItem) GetMemoryTotal() string {
	if x != nil {
		return x.MemoryTotal
	}
	return ""
}

func (x *DetailedInfoItem) GetDiskTotal() string {
	if x != nil {
		return x.DiskTotal
	}
	return ""
}

func (x *DetailedInfoItem) GetCpuCount() string {
	if x != nil {
		return x.CpuCount
	}
	return ""
}

func (x *DetailedInfoItem) GetMountInfo() *MountInfo {
	if x != nil {
		return x.MountInfo
	}
	return nil
}

func (m *DetailedInfoItem) GetExtraInfo() isDetailedInfoItem_ExtraInfo {
	if m != nil {
		return m.ExtraInfo
	}
	return nil
}

func (x *DetailedInfoItem) GetInstanceInfo() *InstanceDetails {
	if x, ok := x.GetExtraInfo().(*DetailedInfoItem_InstanceInfo); ok {
		return x.InstanceInfo
	}
	return nil
}

func (x *DetailedInfoItem) GetSnapshotInfo() *SnapshotDetails {
	if x, ok := x.GetExtraInfo().(*DetailedInfoItem_SnapshotInfo); ok {
		return x.SnapshotInfo
	}
	return nil
}

type isDetailedInfoItem_ExtraInfo interface {
	isDetailedInfoItem_ExtraInfo()
}

type DetailedInfoItem_InstanceInfo struct {
	InstanceInfo *InstanceDetails `protobuf:"bytes,7,opt,name=instance_info,json=instanceInfo,proto3,oneof"`
}

type DetailedInfoItem_SnapshotInfo struct {
	SnapshotInfo *SnapshotDetails `protobuf:"bytes,8,opt,name=snapshot_info,json=snapshotInfo,proto3,oneof"`
}

func (*DetailedInfoItem_InstanceInfo) isDetailedInfoItem_ExtraInfo() {}

func (*DetailedInfoItem_SnapshotInfo) isDetailedInfoItem_ExtraInfo() {}

type InfoReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Details    []*DetailedInfoItem `protobuf:"bytes,1,rep,name=details,proto3" json:"details,omitempty"`
	Snapshots  bool                `protobuf:"varint,2,opt,name=snapshots,proto3" json:"snapshots,omitempty"` // useful to determine what entity (instance/snapshot) was absent when details are empty
	LogLine    string              `protobuf:"bytes,3,opt,name=log_line,json=logLine,proto3" json:"log_line,omitempty"`
	UpdateInfo *UpdateInfo         `protobuf:"bytes,4,opt,name=update_info,json=updateInfo,proto3" json:"update_info,omitempty"`
}

func (x *InfoReply) Reset() {
	*x = InfoReply{}
	mi := &file_multipass_multipass_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InfoReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InfoReply) ProtoMessage() {}

func (x *InfoReply) ProtoReflect() protoreflect.Message {
	mi := &file_multipass_multipass_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InfoReply.ProtoReflect.Descriptor instead.
func (*InfoReply) Descriptor() ([]byte, []int) {
	return file_multipass_multipass_proto_rawDescGZIP(), []int{19}
}

func (x *InfoReply) GetDetails() []*DetailedInfoItem {
	if x != nil {
		return x.Details
	}
	return nil
}

func (x *InfoReply) GetSnapshots() bool {
	if x != nil {
		return x.Snapshots
	}
	return false
}

func (x *InfoReply) GetLogLine() string {
	if x != nil {
		return x.LogLine
	}
	return ""
}

func (x *InfoReply) GetUpdateInfo() *UpdateInfo {
	if x != nil {
		return x.UpdateInfo
	}
	return nil
}

type ListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VerbosityLevel int32 `protobuf:"varint,1,opt,name=verbosity_level,json=verbosityLevel,proto3" json:"verbosity_level,omitempty"`
	Snapshots      bool  `protobuf:"varint,2,opt,name=snapshots,proto3" json:"snapshots,omitempty"`
	RequestIpv4    bool  `protobuf:"varint,3,opt,name=request_ipv4,json=requestIpv4,proto3" json:"request_ipv4,omitempty"`
}

func (x *ListRequest) Reset() {
	*x = ListRequest{}
	mi := &file_multipass_multipass_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRequest) ProtoMessage() {}

func (x *ListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_multipass_multipass_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRequest.ProtoReflect.Descriptor instead.
func (*ListRequest) Descriptor() ([]byte, []int) {
	return file_multipass_multipass_proto_rawDescGZIP(), []int{20}
}

func (x *ListRequest) GetVerbosityLevel() int32 {
	if x != nil {
		return x.VerbosityLevel
	}
	return 0
}

func (x *ListRequest) GetSnapshots() bool {
	if x != nil {
		return x.Snapshots
	}
	return false
}

func (x *ListRequest) GetRequestIpv4() bool {
	if x != nil {
		return x.RequestIpv4
	}
	return false
}

type ListVMInstance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name           string          `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	InstanceStatus *InstanceStatus `protobuf:"bytes,2,opt,name=instance_status,json=instanceStatus,proto3" json:"instance_status,omitempty"`
	Ipv4           []string        `protobuf:"bytes,3,rep,name=ipv4,proto3" json:"ipv4,omitempty"`
	Ipv6           []string        `protobuf:"bytes,4,rep,name=ipv6,proto3" json:"ipv6,omitempty"`
	CurrentRelease string          `protobuf:"bytes,5,opt,name=current_release,json=currentRelease,proto3" json:"current_release,omitempty"`
}

func (x *ListVMInstance) Reset() {
	*x = ListVMInstance{}
	mi := &file_multipass_multipass_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListVMInstance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListVMInstance) ProtoMessage() {}

func (x *ListVMInstance) ProtoReflect() protoreflect.Message {
	mi := &file_multipass_multipass_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListVMInstance.ProtoReflect.Descriptor instead.
func (*ListVMInstance) Descriptor() ([]byte, []int) {
	return file_multipass_multipass_proto_rawDescGZIP(), []int{21}
}

func (x *ListVMInstance) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ListVMInstance) GetInstanceStatus() *InstanceStatus {
	if x != nil {
		return x.InstanceStatus
	}
	return nil
}

func (x *ListVMInstance) GetIpv4() []string {
	if x != nil {
		return x.Ipv4
	}
	return nil
}

func (x *ListVMInstance) GetIpv6() []string {
	if x != nil {
		return x.Ipv6
	}
	return nil
}

func (x *ListVMInstance) GetCurrentRelease() string {
	if x != nil {
		return x.CurrentRelease
	}
	return ""
}

type ListVMSnapshot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name         string                `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Fundamentals *SnapshotFundamentals `protobuf:"bytes,2,opt,name=fundamentals,proto3" json:"fundamentals,omitempty"`
}

func (x *ListVMSnapshot) Reset() {
	*x = ListVMSnapshot{}
	mi := &file_multipass_multipass_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListVMSnapshot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListVMSnapshot) ProtoMessage() {}

func (x *ListVMSnapshot) ProtoReflect() protoreflect.Message {
	mi := &file_multipass_multipass_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListVMSnapshot.ProtoReflect.Descriptor instead.
func (*ListVMSnapshot) Descriptor() ([]byte, []int) {
	return file_multipass_multipass_proto_rawDescGZIP(), []int{22}
}

func (x *ListVMSnapshot) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ListVMSnapshot) GetFundamentals() *SnapshotFundamentals {
	if x != nil {
		return x.Fundamentals
	}
	return nil
}

type InstancesList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Instances []*ListVMInstance `protobuf:"bytes,1,rep,name=instances,proto3" json:"instances,omitempty"`
}

func (x *InstancesList) Reset() {
	*x = InstancesList{}
	mi := &file_multipass_multipass_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InstancesList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstancesList) ProtoMessage() {}

func (x *InstancesList) ProtoReflect() protoreflect.Message {
	mi := &file_multipass_multipass_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstancesList.ProtoReflect.Descriptor instead.
func (*InstancesList) Descriptor() ([]byte, []int) {
	return file_multipass_multipass_proto_rawDescGZIP(), []int{23}
}

func (x *InstancesList) GetInstances() []*ListVMInstance {
	if x != nil {
		return x.Instances
	}
	return nil
}

type SnapshotsList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Snapshots []*ListVMSnapshot `protobuf:"bytes,1,rep,name=snapshots,proto3" json:"snapshots,omitempty"`
}

func (x *SnapshotsList) Reset() {
	*x = SnapshotsList{}
	mi := &file_multipass_multipass_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SnapshotsList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnapshotsList) ProtoMessage() {}

func (x *SnapshotsList) ProtoReflect() protoreflect.Message {
	mi := &file_multipass_multipass_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnapshotsList.ProtoReflect.Descriptor instead.
func (*SnapshotsList) Descriptor() ([]byte, []int) {
	return file_multipass_multipass_proto_rawDescGZIP(), []int{24}
}

func (x *SnapshotsList) GetSnapshots() []*ListVMSnapshot {
	if x != nil {
		return x.Snapshots
	}
	return nil
}

type ListReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to ListContents:
	//
	//	*ListReply_InstanceList
	//	*ListReply_SnapshotList
	ListContents isListReply_ListContents `protobuf_oneof:"list_contents"`
	LogLine      string                   `protobuf:"bytes,3,opt,name=log_line,json=logLine,proto3" json:"log_line,omitempty"`
	UpdateInfo   *UpdateInfo              `protobuf:"bytes,4,opt,name=update_info,json=updateInfo,proto3" json:"update_info,omitempty"`
}

func (x *ListReply) Reset() {
	*x = ListReply{}
	mi := &file_multipass_multipass_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListReply) ProtoMessage() {}

func (x *ListReply) ProtoReflect() protoreflect.Message {
	mi := &file_multipass_multipass_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListReply.ProtoReflect.Descriptor instead.
func (*ListReply) Descriptor() ([]byte, []int) {
	return file_multipass_multipass_proto_rawDescGZIP(), []int{25}
}

func (m *ListReply) GetListContents() isListReply_ListContents {
	if m != nil {
		return m.ListContents
	}
	return nil
}

func (x *ListReply) GetInstanceList() *InstancesList {
	if x, ok := x.GetListContents().(*ListReply_InstanceList); ok {
		return x.InstanceList
	}
	return nil
}

func (x *ListReply) GetSnapshotList() *SnapshotsList {
	if x, ok := x.GetListContents().(*ListReply_SnapshotList); ok {
		return x.SnapshotList
	}
	return nil
}

func (x *ListReply) GetLogLine() string {
	if x != nil {
		return x.LogLine
	}
	return ""
}

func (x *ListReply) GetUpdateInfo() *UpdateInfo {
	if x != nil {
		return x.UpdateInfo
	}
	return nil
}

type isListReply_ListContents interface {
	isListReply_ListContents()
}

type ListReply_InstanceList struct {
	InstanceList *InstancesList `protobuf:"bytes,1,opt,name=instance_list,json=instanceList,proto3,oneof"`
}

type ListReply_SnapshotList struct {
	SnapshotList *SnapshotsList `protobuf:"bytes,2,opt,name=snapshot_list,json=snapshotList,proto3,oneof"`
}

func (*ListReply_InstanceList) isListReply_ListContents() {}

func (*ListReply_SnapshotList) isListReply_ListContents() {}

type NetworksRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VerbosityLevel int32 `protobuf:"varint,1,opt,name=verbosity_level,json=verbosityLevel,proto3" json:"verbosity_level,omitempty"`
}

func (x *NetworksRequest) Reset() {
	*x = NetworksRequest{}
	mi := &file_multipass_multipass_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworksRequest) ProtoMessage() {}

func (x *NetworksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_multipass_multipass_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworksRequest.ProtoReflect.Descriptor instead.
func (*NetworksRequest) Descriptor() ([]byte, []int) {
	return file_multipass_multipass_proto_rawDescGZIP(), []int{26}
}

func (x *NetworksRequest) GetVerbosityLevel() int32 {
	if x != nil {
		return x.VerbosityLevel
	}
	return 0
}

type NetInterface struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type        string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *NetInterface) Reset() {
	*x = NetInterface{}
	mi := &file_multipass_multipass_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetInterface) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetInterface) ProtoMessage() {}

func (x *NetInterface) ProtoReflect() protoreflect.Message {
	mi := &file_multipass_multipass_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetInterface.ProtoReflect.Descriptor instead.
func (*NetInterface) Descriptor() ([]byte, []int) {
	return file_multipass_multipass_proto_rawDescGZIP(), []int{27}
}

func (x *NetInterface) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NetInterface) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *NetInterface) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type NetworksReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Interfaces []*NetInterface `protobuf:"bytes,1,rep,name=interfaces,proto3" json:"interfaces,omitempty"`
	LogLine    string          `protobuf:"bytes,2,opt,name=log_line,json=logLine,proto3" json:"log_line,omitempty"`
	UpdateInfo *UpdateInfo     `protobuf:"bytes,3,opt,name=update_info,json=updateInfo,proto3" json:"update_info,omitempty"`
}

func (x *NetworksReply) Reset() {
	*x = NetworksReply{}
	mi := &file_multipass_multipass_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworksReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworksReply) ProtoMessage() {}

func (x *NetworksReply) ProtoReflect() protoreflect.Message {
	mi := &file_multipass_multipass_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworksReply.ProtoReflect.Descriptor instead.
func (*NetworksReply) Descriptor() ([]byte, []int) {
	return file_multipass_multipass_proto_rawDescGZIP(), []int{28}
}

func (x *NetworksReply) GetInterfaces() []*NetInterface {
	if x != nil {
		return x.Interfaces
	}
	return nil
}

func (x *NetworksReply) GetLogLine() string {
	if x != nil {
		return x.LogLine
	}
	return ""
}

func (x *NetworksReply) GetUpdateInfo() *UpdateInfo {
	if x != nil {
		return x.UpdateInfo
	}
	return nil
}

type TargetPathInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstanceName string `protobuf:"bytes,1,opt,name=instance_name,json=instanceName,proto3" json:"instance_name,omitempty"`
	TargetPath   string `protobuf:"bytes,2,opt,name=target_path,json=targetPath,proto3" json:"target_path,omitempty"`
}

func (x *TargetPathInfo) Reset() {
	*x = TargetPathInfo{}
	mi := &file_multipass_multipass_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TargetPathInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TargetPathInfo) ProtoMessage() {}

func (x *TargetPathInfo) ProtoReflect() protoreflect.Message {
	mi := &file_multipass_multipass_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TargetPathInfo.ProtoReflect.Descriptor instead.
func (*TargetPathInfo) Descriptor() ([]byte, []int) {
	return file_multipass_multipass_proto_rawDescGZIP(), []int{29}
}

func (x *TargetPathInfo) GetInstanceName() string {
	if x != nil {
		return x.InstanceName
	}
	return ""
}

func (x *TargetPathInfo) GetTargetPath() string {
	if x != nil {
		return x.TargetPath
	}
	return ""
}

type MountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourcePath     string                 `protobuf:"bytes,1,opt,name=source_path,json=sourcePath,proto3" json:"source_path,omitempty"`
	TargetPaths    []*TargetPathInfo      `protobuf:"bytes,2,rep,name=target_paths,json=targetPaths,proto3" json:"target_paths,omitempty"`
	MountMaps      *MountMaps             `protobuf:"bytes,3,opt,name=mount_maps,json=mountMaps,proto3" json:"mount_maps,omitempty"`
	VerbosityLevel int32                  `protobuf:"varint,4,opt,name=verbosity_level,json=verbosityLevel,proto3" json:"verbosity_level,omitempty"`
	MountType      MountRequest_MountType `protobuf:"varint,5,opt,name=mount_type,json=mountType,proto3,enum=multipass.MountRequest_MountType" json:"mount_type,omitempty"`
	Password       string                 `protobuf:"bytes,6,opt,name=password,proto3" json:"password,omitempty"`
}

func (x *MountRequest) Reset() {
	*x = MountRequest{}
	mi := &file_multipass_multipass_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MountRequest) ProtoMessage() {}

func (x *MountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_multipass_multipass_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MountRequest.ProtoReflect.Descriptor instead.
func (*MountRequest) Descriptor() ([]byte, []int) {
	return file_multipass_multipass_proto_rawDescGZIP(), []int{30}
}

func (x *MountRequest) GetSourcePath() string {
	if x != nil {
		return x.SourcePath
	}
	return ""
}

func (x *MountRequest) GetTargetPaths() []*TargetPathInfo {
	if x != nil {
		return x.TargetPaths
	}
	return nil
}

func (x *MountRequest) GetMountMaps() *MountMaps {
	if x != nil {
		return x.MountMaps
	}
	return nil
}

func (x *MountRequest) GetVerbosityLevel() int32 {
	if x != nil {
		return x.VerbosityLevel
	}
	return 0
}

func (x *MountRequest) GetMountType() MountRequest_MountType {
	if x != nil {
		return x.MountType
	}
	return MountRequest_CLASSIC
}

func (x *MountRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type MountReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LogLine           string `protobuf:"bytes,1,opt,name=log_line,json=logLine,proto3" json:"log_line,omitempty"`
	ReplyMessage      string `protobuf:"bytes,2,opt,name=reply_message,json=replyMessage,proto3" json:"reply_message,omitempty"`
	PasswordRequested bool   `protobuf:"varint,3,opt,name=password_requested,json=passwordRequested,proto3" json:"password_requested,omitempty"`
}

func (x *MountReply) Reset() {
	*x = MountReply{}
	mi := &file_multipass_multipass_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MountReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MountReply) ProtoMessage() {}

func (x *MountReply) ProtoReflect() protoreflect.Message {
	mi := &file_multipass_multipass_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MountReply.ProtoReflect.Descriptor instead.
func (*MountReply) Descriptor() ([]byte, []int) {
	return file_multipass_multipass_proto_rawDescGZIP(), []int{31}
}

func (x *MountReply) GetLogLine() string {
	if x != nil {
		return x.LogLine
	}
	return ""
}

func (x *MountReply) GetReplyMessage() string {
	if x != nil {
		return x.ReplyMessage
	}
	return ""
}

func (x *MountReply) GetPasswordRequested() bool {
	if x != nil {
		return x.PasswordRequested
	}
	return false
}

type PingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PingRequest) Reset() {
	*x = PingRequest{}
	mi := &file_multipass_multipass_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PingRequest) ProtoMessage() {}

func (x *PingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_multipass_multipass_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PingRequest.ProtoReflect.Descriptor instead.
func (*PingRequest) Descriptor() ([]byte, []int) {
	return file_multipass_multipass_proto_rawDescGZIP(), []int{32}
}

type PingReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PingReply) Reset() {
	*x = PingReply{}
	mi := &file_multipass_multipass_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PingReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PingReply) ProtoMessage() {}

func (x *PingReply) ProtoReflect() protoreflect.Message {
	mi := &file_multipass_multipass_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PingReply.ProtoReflect.Descriptor instead.
func (*PingReply) Descriptor() ([]byte, []int) {
	return file_multipass_multipass_proto_rawDescGZIP(), []int{33}
}

type InstanceNames struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstanceName []string `protobuf:"bytes,1,rep,name=instance_name,json=instanceName,proto3" json:"instance_name,omitempty"`
}

func (x *InstanceNames) Reset() {
	*x = InstanceNames{}
	mi := &file_multipass_multipass_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InstanceNames) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstanceNames) ProtoMessage() {}

func (x *InstanceNames) ProtoReflect() protoreflect.Message {
	mi := &file_multipass_multipass_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstanceNames.ProtoReflect.Descriptor instead.
func (*InstanceNames) Descriptor() ([]byte, []int) {
	return file_multipass_multipass_proto_rawDescGZIP(), []int{34}
}

func (x *InstanceNames) GetInstanceName() []string {
	if x != nil {
		return x.InstanceName
	}
	return nil
}

type RecoverRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstanceNames  *InstanceNames `protobuf:"bytes,1,opt,name=instance_names,json=instanceNames,proto3" json:"instance_names,omitempty"`
	VerbosityLevel int32          `protobuf:"varint,2,opt,name=verbosity_level,json=verbosityLevel,proto3" json:"verbosity_level,omitempty"`
}

func (x *RecoverRequest) Reset() {
	*x = RecoverRequest{}
	mi := &file_multipass_multipass_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecoverRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecoverRequest) ProtoMessage() {}

func (x *RecoverRequest) ProtoReflect() protoreflect.Message {
	mi := &file_multipass_multipass_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecoverRequest.ProtoReflect.Descriptor instead.
func (*RecoverRequest) Descriptor() ([]byte, []int) {
	return file_multipass_multipass_proto_rawDescGZIP(), []int{35}
}

func (x *RecoverRequest) GetInstanceNames() *InstanceNames {
	if x != nil {
		return x.InstanceNames
	}
	return nil
}

func (x *RecoverRequest) GetVerbosityLevel() int32 {
	if x != nil {
		return x.VerbosityLevel
	}
	return 0
}

type RecoverReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LogLine string `protobuf:"bytes,1,opt,name=log_line,json=logLine,proto3" json:"log_line,omitempty"`
}

func (x *RecoverReply) Reset() {
	*x = RecoverReply{}
	mi := &file_multipass_multipass_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecoverReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecoverReply) ProtoMessage() {}

func (x *RecoverReply) ProtoReflect() protoreflect.Message {
	mi := &file_multipass_multipass_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecoverReply.ProtoReflect.Descriptor instead.
func (*RecoverReply) Descriptor() ([]byte, []int) {
	return file_multipass_multipass_proto_rawDescGZIP(), []int{36}
}

func (x *RecoverReply) GetLogLine() string {
	if x != nil {
		return x.LogLine
	}
	return ""
}

type SSHInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstanceName   []string `protobuf:"bytes,1,rep,name=instance_name,json=instanceName,proto3" json:"instance_name,omitempty"`
	VerbosityLevel int32    `protobuf:"varint,2,opt,name=verbosity_level,json=verbosityLevel,proto3" json:"verbosity_level,omitempty"`
}

func (x *SSHInfoRequest) Reset() {
	*x = SSHInfoRequest{}
	mi := &file_multipass_multipass_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SSHInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SSHInfoRequest) ProtoMessage() {}

func (x *SSHInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_multipass_multipass_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SSHInfoRequest.ProtoReflect.Descriptor instead.
func (*SSHInfoRequest) Descriptor() ([]byte, []int) {
	return file_multipass_multipass_proto_rawDescGZIP(), []int{37}
}

func (x *SSHInfoRequest) GetInstanceName() []string {
	if x != nil {
		return x.InstanceName
	}
	return nil
}

func (x *SSHInfoRequest) GetVerbosityLevel() int32 {
	if x != nil {
		return x.VerbosityLevel
	}
	return 0
}

type SSHInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Port          int32  `protobuf:"varint,1,opt,name=port,proto3" json:"port,omitempty"`
	PrivKeyBase64 string `protobuf:"bytes,2,opt,name=priv_key_base64,json=privKeyBase64,proto3" json:"priv_key_base64,omitempty"`
	Host          string `protobuf:"bytes,3,opt,name=host,proto3" json:"host,omitempty"`
	Username      string `protobuf:"bytes,4,opt,name=username,proto3" json:"username,omitempty"`
}

func (x *SSHInfo) Reset() {
	*x = SSHInfo{}
	mi := &file_multipass_multipass_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SSHInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SSHInfo) ProtoMessage() {}

func (x *SSHInfo) ProtoReflect() protoreflect.Message {
	mi := &file_multipass_multipass_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SSHInfo.ProtoReflect.Descriptor instead.
func (*SSHInfo) Descriptor() ([]byte, []int) {
	return file_multipass_multipass_proto_rawDescGZIP(), []int{38}
}

func (x *SSHInfo) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *SSHInfo) GetPrivKeyBase64() string {
	if x != nil {
		return x.PrivKeyBase64
	}
	return ""
}

func (x *SSHInfo) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *SSHInfo) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

type SSHInfoReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SshInfo map[string]*SSHInfo `protobuf:"bytes,1,rep,name=ssh_info,json=sshInfo,proto3" json:"ssh_info,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	LogLine string              `protobuf:"bytes,2,opt,name=log_line,json=logLine,proto3" json:"log_line,omitempty"`
}

func (x *SSHInfoReply) Reset() {
	*x = SSHInfoReply{}
	mi := &file_multipass_multipass_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SSHInfoReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SSHInfoReply) ProtoMessage() {}

func (x *SSHInfoReply) ProtoReflect() protoreflect.Message {
	mi := &file_multipass_multipass_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SSHInfoReply.ProtoReflect.Descriptor instead.
func (*SSHInfoReply) Descriptor() ([]byte, []int) {
	return file_multipass_multipass_proto_rawDescGZIP(), []int{39}
}

func (x *SSHInfoReply) GetSshInfo() map[string]*SSHInfo {
	if x != nil {
		return x.SshInfo
	}
	return nil
}

func (x *SSHInfoReply) GetLogLine() string {
	if x != nil {
		return x.LogLine
	}
	return ""
}

type StartError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstanceErrors map[string]StartError_ErrorCode `protobuf:"bytes,1,rep,name=instance_errors,json=instanceErrors,proto3" json:"instance_errors,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3,enum=multipass.StartError_ErrorCode"`
}

func (x *StartError) Reset() {
	*x = StartError{}
	mi := &file_multipass_multipass_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartError) ProtoMessage() {}

func (x *StartError) ProtoReflect() protoreflect.Message {
	mi := &file_multipass_multipass_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartError.ProtoReflect.Descriptor instead.
func (*StartError) Descriptor() ([]byte, []int) {
	return file_multipass_multipass_proto_rawDescGZIP(), []int{40}
}

func (x *StartError) GetInstanceErrors() map[string]StartError_ErrorCode {
	if x != nil {
		return x.InstanceErrors
	}
	return nil
}

type StartRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstanceNames  *InstanceNames `protobuf:"bytes,1,opt,name=instance_names,json=instanceNames,proto3" json:"instance_names,omitempty"`
	VerbosityLevel int32          `protobuf:"varint,2,opt,name=verbosity_level,json=verbosityLevel,proto3" json:"verbosity_level,omitempty"`
	Timeout        int32          `protobuf:"varint,3,opt,name=timeout,proto3" json:"timeout,omitempty"`
	Password       string         `protobuf:"bytes,4,opt,name=password,proto3" json:"password,omitempty"`
}

func (x *StartRequest) Reset() {
	*x = StartRequest{}
	mi := &file_multipass_multipass_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartRequest) ProtoMessage() {}

func (x *StartRequest) ProtoReflect() protoreflect.Message {
	mi := &file_multipass_multipass_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartRequest.ProtoReflect.Descriptor instead.
func (*StartRequest) Descriptor() ([]byte, []int) {
	return file_multipass_multipass_proto_rawDescGZIP(), []int{41}
}

func (x *StartRequest) GetInstanceNames() *InstanceNames {
	if x != nil {
		return x.InstanceNames
	}
	return nil
}

func (x *StartRequest) GetVerbosityLevel() int32 {
	if x != nil {
		return x.VerbosityLevel
	}
	return 0
}

func (x *StartRequest) GetTimeout() int32 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

func (x *StartRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type StartReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LogLine           string      `protobuf:"bytes,1,opt,name=log_line,json=logLine,proto3" json:"log_line,omitempty"`
	ReplyMessage      string      `protobuf:"bytes,2,opt,name=reply_message,json=replyMessage,proto3" json:"reply_message,omitempty"`
	UpdateInfo        *UpdateInfo `protobuf:"bytes,3,opt,name=update_info,json=updateInfo,proto3" json:"update_info,omitempty"`
	PasswordRequested bool        `protobuf:"varint,4,opt,name=password_requested,json=passwordRequested,proto3" json:"password_requested,omitempty"`
}

func (x *StartReply) Reset() {
	*x = StartReply{}
	mi := &file_multipass_multipass_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartReply) ProtoMessage() {}

func (x *StartReply) ProtoReflect() protoreflect.Message {
	mi := &file_multipass_multipass_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartReply.ProtoReflect.Descriptor instead.
func (*StartReply) Descriptor() ([]byte, []int) {
	return file_multipass_multipass_proto_rawDescGZIP(), []int{42}
}

func (x *StartReply) GetLogLine() string {
	if x != nil {
		return x.LogLine
	}
	return ""
}

func (x *StartReply) GetReplyMessage() string {
	if x != nil {
		return x.ReplyMessage
	}
	return ""
}

func (x *StartReply) GetUpdateInfo() *UpdateInfo {
	if x != nil {
		return x.UpdateInfo
	}
	return nil
}

func (x *StartReply) GetPasswordRequested() bool {
	if x != nil {
		return x.PasswordRequested
	}
	return false
}

type StopRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstanceNames  *InstanceNames `protobuf:"bytes,1,opt,name=instance_names,json=instanceNames,proto3" json:"instance_names,omitempty"`
	TimeMinutes    int32          `protobuf:"varint,2,opt,name=time_minutes,json=timeMinutes,proto3" json:"time_minutes,omitempty"`
	CancelShutdown bool           `protobuf:"varint,3,opt,name=cancel_shutdown,json=cancelShutdown,proto3" json:"cancel_shutdown,omitempty"`
	VerbosityLevel int32          `protobuf:"varint,4,opt,name=verbosity_level,json=verbosityLevel,proto3" json:"verbosity_level,omitempty"`
	ForceStop      bool           `protobuf:"varint,5,opt,name=force_stop,json=forceStop,proto3" json:"force_stop,omitempty"`
}

func (x *StopRequest) Reset() {
	*x = StopRequest{}
	mi := &file_multipass_multipass_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StopRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopRequest) ProtoMessage() {}

func (x *StopRequest) ProtoReflect() protoreflect.Message {
	mi := &file_multipass_multipass_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopRequest.ProtoReflect.Descriptor instead.
func (*StopRequest) Descriptor() ([]byte, []int) {
	return file_multipass_multipass_proto_rawDescGZIP(), []int{43}
}

func (x *StopRequest) GetInstanceNames() *InstanceNames {
	if x != nil {
		return x.InstanceNames
	}
	return nil
}

func (x *StopRequest) GetTimeMinutes() int32 {
	if x != nil {
		return x.TimeMinutes
	}
	return 0
}

func (x *StopRequest) GetCancelShutdown() bool {
	if x != nil {
		return x.CancelShutdown
	}
	return false
}

func (x *StopRequest) GetVerbosityLevel() int32 {
	if x != nil {
		return x.VerbosityLevel
	}
	return 0
}

func (x *StopRequest) GetForceStop() bool {
	if x != nil {
		return x.ForceStop
	}
	return false
}

type StopReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LogLine string `protobuf:"bytes,1,opt,name=log_line,json=logLine,proto3" json:"log_line,omitempty"`
}

func (x *StopReply) Reset() {
	*x = StopReply{}
	mi := &file_multipass_multipass_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StopReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopReply) ProtoMessage() {}

func (x *StopReply) ProtoReflect() protoreflect.Message {
	mi := &file_multipass_multipass_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopReply.ProtoReflect.Descriptor instead.
func (*StopReply) Descriptor() ([]byte, []int) {
	return file_multipass_multipass_proto_rawDescGZIP(), []int{44}
}

func (x *StopReply) GetLogLine() string {
	if x != nil {
		return x.LogLine
	}
	return ""
}

type SuspendRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstanceNames  *InstanceNames `protobuf:"bytes,1,opt,name=instance_names,json=instanceNames,proto3" json:"instance_names,omitempty"`
	VerbosityLevel int32          `protobuf:"varint,2,opt,name=verbosity_level,json=verbosityLevel,proto3" json:"verbosity_level,omitempty"`
}

func (x *SuspendRequest) Reset() {
	*x = SuspendRequest{}
	mi := &file_multipass_multipass_proto_msgTypes[45]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SuspendRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuspendRequest) ProtoMessage() {}

func (x *SuspendRequest) ProtoReflect() protoreflect.Message {
	mi := &file_multipass_multipass_proto_msgTypes[45]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuspendRequest.ProtoReflect.Descriptor instead.
func (*SuspendRequest) Descriptor() ([]byte, []int) {
	return file_multipass_multipass_proto_rawDescGZIP(), []int{45}
}

func (x *SuspendRequest) GetInstanceNames() *InstanceNames {
	if x != nil {
		return x.InstanceNames
	}
	return nil
}

func (x *SuspendRequest) GetVerbosityLevel() int32 {
	if x != nil {
		return x.VerbosityLevel
	}
	return 0
}

type SuspendReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LogLine string `protobuf:"bytes,1,opt,name=log_line,json=logLine,proto3" json:"log_line,omitempty"`
}

func (x *SuspendReply) Reset() {
	*x = SuspendReply{}
	mi := &file_multipass_multipass_proto_msgTypes[46]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SuspendReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuspendReply) ProtoMessage() {}

func (x *SuspendReply) ProtoReflect() protoreflect.Message {
	mi := &file_multipass_multipass_proto_msgTypes[46]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuspendReply.ProtoReflect.Descriptor instead.
func (*SuspendReply) Descriptor() ([]byte, []int) {
	return file_multipass_multipass_proto_rawDescGZIP(), []int{46}
}

func (x *SuspendReply) GetLogLine() string {
	if x != nil {
		return x.LogLine
	}
	return ""
}

type RestartRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstanceNames  *InstanceNames `protobuf:"bytes,1,opt,name=instance_names,json=instanceNames,proto3" json:"instance_names,omitempty"`
	VerbosityLevel int32          `protobuf:"varint,2,opt,name=verbosity_level,json=verbosityLevel,proto3" json:"verbosity_level,omitempty"`
	Timeout        int32          `protobuf:"varint,3,opt,name=timeout,proto3" json:"timeout,omitempty"`
	Password       string         `protobuf:"bytes,4,opt,name=password,proto3" json:"password,omitempty"`
}

func (x *RestartRequest) Reset() {
	*x = RestartRequest{}
	mi := &file_multipass_multipass_proto_msgTypes[47]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RestartRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RestartRequest) ProtoMessage() {}

func (x *RestartRequest) ProtoReflect() protoreflect.Message {
	mi := &file_multipass_multipass_proto_msgTypes[47]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RestartRequest.ProtoReflect.Descriptor instead.
func (*RestartRequest) Descriptor() ([]byte, []int) {
	return file_multipass_multipass_proto_rawDescGZIP(), []int{47}
}

func (x *RestartRequest) GetInstanceNames() *InstanceNames {
	if x != nil {
		return x.InstanceNames
	}
	return nil
}

func (x *RestartRequest) GetVerbosityLevel() int32 {
	if x != nil {
		return x.VerbosityLevel
	}
	return 0
}

func (x *RestartRequest) GetTimeout() int32 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

func (x *RestartRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type RestartReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LogLine           string      `protobuf:"bytes,1,opt,name=log_line,json=logLine,proto3" json:"log_line,omitempty"`
	ReplyMessage      string      `protobuf:"bytes,2,opt,name=reply_message,json=replyMessage,proto3" json:"reply_message,omitempty"`
	UpdateInfo        *UpdateInfo `protobuf:"bytes,3,opt,name=update_info,json=updateInfo,proto3" json:"update_info,omitempty"`
	PasswordRequested bool        `protobuf:"varint,4,opt,name=password_requested,json=passwordRequested,proto3" json:"password_requested,omitempty"`
}

func (x *RestartReply) Reset() {
	*x = RestartReply{}
	mi := &file_multipass_multipass_proto_msgTypes[48]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RestartReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RestartReply) ProtoMessage() {}

func (x *RestartReply) ProtoReflect() protoreflect.Message {
	mi := &file_multipass_multipass_proto_msgTypes[48]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RestartReply.ProtoReflect.Descriptor instead.
func (*RestartReply) Descriptor() ([]byte, []int) {
	return file_multipass_multipass_proto_rawDescGZIP(), []int{48}
}

func (x *RestartReply) GetLogLine() string {
	if x != nil {
		return x.LogLine
	}
	return ""
}

func (x *RestartReply) GetReplyMessage() string {
	if x != nil {
		return x.ReplyMessage
	}
	return ""
}

func (x *RestartReply) GetUpdateInfo() *UpdateInfo {
	if x != nil {
		return x.UpdateInfo
	}
	return nil
}

func (x *RestartReply) GetPasswordRequested() bool {
	if x != nil {
		return x.PasswordRequested
	}
	return false
}

type DeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstanceSnapshotPairs []*InstanceSnapshotPair `protobuf:"bytes,1,rep,name=instance_snapshot_pairs,json=instanceSnapshotPairs,proto3" json:"instance_snapshot_pairs,omitempty"`
	Purge                 bool                    `protobuf:"varint,2,opt,name=purge,proto3" json:"purge,omitempty"`
	VerbosityLevel        int32                   `protobuf:"varint,3,opt,name=verbosity_level,json=verbosityLevel,proto3" json:"verbosity_level,omitempty"`
	PurgeSnapshots        bool                    `protobuf:"varint,4,opt,name=purge_snapshots,json=purgeSnapshots,proto3" json:"purge_snapshots,omitempty"`
}

func (x *DeleteRequest) Reset() {
	*x = DeleteRequest{}
	mi := &file_multipass_multipass_proto_msgTypes[49]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRequest) ProtoMessage() {}

func (x *DeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_multipass_multipass_proto_msgTypes[49]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRequest.ProtoReflect.Descriptor instead.
func (*DeleteRequest) Descriptor() ([]byte, []int) {
	return file_multipass_multipass_proto_rawDescGZIP(), []int{49}
}

func (x *DeleteRequest) GetInstanceSnapshotPairs() []*InstanceSnapshotPair {
	if x != nil {
		return x.InstanceSnapshotPairs
	}
	return nil
}

func (x *DeleteRequest) GetPurge() bool {
	if x != nil {
		return x.Purge
	}
	return false
}

func (x *DeleteRequest) GetVerbosityLevel() int32 {
	if x != nil {
		return x.VerbosityLevel
	}
	return 0
}

func (x *DeleteRequest) GetPurgeSnapshots() bool {
	if x != nil {
		return x.PurgeSnapshots
	}
	return false
}

type DeleteReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LogLine                string   `protobuf:"bytes,1,opt,name=log_line,json=logLine,proto3" json:"log_line,omitempty"`
	PurgedInstances        []string `protobuf:"bytes,2,rep,name=purged_instances,json=purgedInstances,proto3" json:"purged_instances,omitempty"`
	ConfirmSnapshotPurging bool     `protobuf:"varint,3,opt,name=confirm_snapshot_purging,json=confirmSnapshotPurging,proto3" json:"confirm_snapshot_purging,omitempty"`
}

func (x *DeleteReply) Reset() {
	*x = DeleteReply{}
	mi := &file_multipass_multipass_proto_msgTypes[50]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteReply) ProtoMessage() {}

func (x *DeleteReply) ProtoReflect() protoreflect.Message {
	mi := &file_multipass_multipass_proto_msgTypes[50]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteReply.ProtoReflect.Descriptor instead.
func (*DeleteReply) Descriptor() ([]byte, []int) {
	return file_multipass_multipass_proto_rawDescGZIP(), []int{50}
}

func (x *DeleteReply) GetLogLine() string {
	if x != nil {
		return x.LogLine
	}
	return ""
}

func (x *DeleteReply) GetPurgedInstances() []string {
	if x != nil {
		return x.PurgedInstances
	}
	return nil
}

func (x *DeleteReply) GetConfirmSnapshotPurging() bool {
	if x != nil {
		return x.ConfirmSnapshotPurging
	}
	return false
}

type UmountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TargetPaths    []*TargetPathInfo `protobuf:"bytes,1,rep,name=target_paths,json=targetPaths,proto3" json:"target_paths,omitempty"`
	VerbosityLevel int32             `protobuf:"varint,2,opt,name=verbosity_level,json=verbosityLevel,proto3" json:"verbosity_level,omitempty"`
}

func (x *UmountRequest) Reset() {
	*x = UmountRequest{}
	mi := &file_multipass_multipass_proto_msgTypes[51]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UmountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UmountRequest) ProtoMessage() {}

func (x *UmountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_multipass_multipass_proto_msgTypes[51]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UmountRequest.ProtoReflect.Descriptor instead.
func (*UmountRequest) Descriptor() ([]byte, []int) {
	return file_multipass_multipass_proto_rawDescGZIP(), []int{51}
}

func (x *UmountRequest) GetTargetPaths() []*TargetPathInfo {
	if x != nil {
		return x.TargetPaths
	}
	return nil
}

func (x *UmountRequest) GetVerbosityLevel() int32 {
	if x != nil {
		return x.VerbosityLevel
	}
	return 0
}

type UmountReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LogLine string `protobuf:"bytes,1,opt,name=log_line,json=logLine,proto3" json:"log_line,omitempty"`
}

func (x *UmountReply) Reset() {
	*x = UmountReply{}
	mi := &file_multipass_multipass_proto_msgTypes[52]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UmountReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UmountReply) ProtoMessage() {}

func (x *UmountReply) ProtoReflect() protoreflect.Message {
	mi := &file_multipass_multipass_proto_msgTypes[52]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UmountReply.ProtoReflect.Descriptor instead.
func (*UmountReply) Descriptor() ([]byte, []int) {
	return file_multipass_multipass_proto_rawDescGZIP(), []int{52}
}

func (x *UmountReply) GetLogLine() string {
	if x != nil {
		return x.LogLine
	}
	return ""
}

type VersionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VerbosityLevel int32 `protobuf:"varint,1,opt,name=verbosity_level,json=verbosityLevel,proto3" json:"verbosity_level,omitempty"`
}

func (x *VersionRequest) Reset() {
	*x = VersionRequest{}
	mi := &file_multipass_multipass_proto_msgTypes[53]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VersionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VersionRequest) ProtoMessage() {}

func (x *VersionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_multipass_multipass_proto_msgTypes[53]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VersionRequest.ProtoReflect.Descriptor instead.
func (*VersionRequest) Descriptor() ([]byte, []int) {
	return file_multipass_multipass_proto_rawDescGZIP(), []int{53}
}

func (x *VersionRequest) GetVerbosityLevel() int32 {
	if x != nil {
		return x.VerbosityLevel
	}
	return 0
}

type VersionReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version    string      `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	LogLine    string      `protobuf:"bytes,2,opt,name=log_line,json=logLine,proto3" json:"log_line,omitempty"`
	UpdateInfo *UpdateInfo `protobuf:"bytes,3,opt,name=update_info,json=updateInfo,proto3" json:"update_info,omitempty"`
}

func (x *VersionReply) Reset() {
	*x = VersionReply{}
	mi := &file_multipass_multipass_proto_msgTypes[54]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VersionReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VersionReply) ProtoMessage() {}

func (x *VersionReply) ProtoReflect() protoreflect.Message {
	mi := &file_multipass_multipass_proto_msgTypes[54]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VersionReply.ProtoReflect.Descriptor instead.
func (*VersionReply) Descriptor() ([]byte, []int) {
	return file_multipass_multipass_proto_rawDescGZIP(), []int{54}
}

func (x *VersionReply) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *VersionReply) GetLogLine() string {
	if x != nil {
		return x.LogLine
	}
	return ""
}

func (x *VersionReply) GetUpdateInfo() *UpdateInfo {
	if x != nil {
		return x.UpdateInfo
	}
	return nil
}

type GetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key            string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	VerbosityLevel int32  `protobuf:"varint,2,opt,name=verbosity_level,json=verbosityLevel,proto3" json:"verbosity_level,omitempty"`
}

func (x *GetRequest) Reset() {
	*x = GetRequest{}
	mi := &file_multipass_multipass_proto_msgTypes[55]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRequest) ProtoMessage() {}

func (x *GetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_multipass_multipass_proto_msgTypes[55]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRequest.ProtoReflect.Descriptor instead.
func (*GetRequest) Descriptor() ([]byte, []int) {
	return file_multipass_multipass_proto_rawDescGZIP(), []int{55}
}

func (x *GetRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *GetRequest) GetVerbosityLevel() int32 {
	if x != nil {
		return x.VerbosityLevel
	}
	return 0
}

type GetReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value   string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	LogLine string `protobuf:"bytes,2,opt,name=log_line,json=logLine,proto3" json:"log_line,omitempty"`
}

func (x *GetReply) Reset() {
	*x = GetReply{}
	mi := &file_multipass_multipass_proto_msgTypes[56]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetReply) ProtoMessage() {}

func (x *GetReply) ProtoReflect() protoreflect.Message {
	mi := &file_multipass_multipass_proto_msgTypes[56]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetReply.ProtoReflect.Descriptor instead.
func (*GetReply) Descriptor() ([]byte, []int) {
	return file_multipass_multipass_proto_rawDescGZIP(), []int{56}
}

func (x *GetReply) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *GetReply) GetLogLine() string {
	if x != nil {
		return x.LogLine
	}
	return ""
}

type SetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key            string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Val            string `protobuf:"bytes,2,opt,name=val,proto3" json:"val,omitempty"`
	VerbosityLevel int32  `protobuf:"varint,3,opt,name=verbosity_level,json=verbosityLevel,proto3" json:"verbosity_level,omitempty"`
	Authorized     bool   `protobuf:"varint,4,opt,name=authorized,proto3" json:"authorized,omitempty"`
}

func (x *SetRequest) Reset() {
	*x = SetRequest{}
	mi := &file_multipass_multipass_proto_msgTypes[57]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetRequest) ProtoMessage() {}

func (x *SetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_multipass_multipass_proto_msgTypes[57]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetRequest.ProtoReflect.Descriptor instead.
func (*SetRequest) Descriptor() ([]byte, []int) {
	return file_multipass_multipass_proto_rawDescGZIP(), []int{57}
}

func (x *SetRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *SetRequest) GetVal() string {
	if x != nil {
		return x.Val
	}
	return ""
}

func (x *SetRequest) GetVerbosityLevel() int32 {
	if x != nil {
		return x.VerbosityLevel
	}
	return 0
}

func (x *SetRequest) GetAuthorized() bool {
	if x != nil {
		return x.Authorized
	}
	return false
}

type SetReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LogLine            string `protobuf:"bytes,1,opt,name=log_line,json=logLine,proto3" json:"log_line,omitempty"`
	ReplyMessage       string `protobuf:"bytes,2,opt,name=reply_message,json=replyMessage,proto3" json:"reply_message,omitempty"`
	NeedsAuthorization bool   `protobuf:"varint,3,opt,name=needs_authorization,json=needsAuthorization,proto3" json:"needs_authorization,omitempty"`
}

func (x *SetReply) Reset() {
	*x = SetReply{}
	mi := &file_multipass_multipass_proto_msgTypes[58]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetReply) ProtoMessage() {}

func (x *SetReply) ProtoReflect() protoreflect.Message {
	mi := &file_multipass_multipass_proto_msgTypes[58]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetReply.ProtoReflect.Descriptor instead.
func (*SetReply) Descriptor() ([]byte, []int) {
	return file_multipass_multipass_proto_rawDescGZIP(), []int{58}
}

func (x *SetReply) GetLogLine() string {
	if x != nil {
		return x.LogLine
	}
	return ""
}

func (x *SetReply) GetReplyMessage() string {
	if x != nil {
		return x.ReplyMessage
	}
	return ""
}

func (x *SetReply) GetNeedsAuthorization() bool {
	if x != nil {
		return x.NeedsAuthorization
	}
	return false
}

type KeysRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VerbosityLevel int32 `protobuf:"varint,1,opt,name=verbosity_level,json=verbosityLevel,proto3" json:"verbosity_level,omitempty"`
}

func (x *KeysRequest) Reset() {
	*x = KeysRequest{}
	mi := &file_multipass_multipass_proto_msgTypes[59]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KeysRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeysRequest) ProtoMessage() {}

func (x *KeysRequest) ProtoReflect() protoreflect.Message {
	mi := &file_multipass_multipass_proto_msgTypes[59]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeysRequest.ProtoReflect.Descriptor instead.
func (*KeysRequest) Descriptor() ([]byte, []int) {
	return file_multipass_multipass_proto_rawDescGZIP(), []int{59}
}

func (x *KeysRequest) GetVerbosityLevel() int32 {
	if x != nil {
		return x.VerbosityLevel
	}
	return 0
}

type KeysReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LogLine      string   `protobuf:"bytes,1,opt,name=log_line,json=logLine,proto3" json:"log_line,omitempty"`
	SettingsKeys []string `protobuf:"bytes,2,rep,name=settings_keys,json=settingsKeys,proto3" json:"settings_keys,omitempty"`
}

func (x *KeysReply) Reset() {
	*x = KeysReply{}
	mi := &file_multipass_multipass_proto_msgTypes[60]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KeysReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeysReply) ProtoMessage() {}

func (x *KeysReply) ProtoReflect() protoreflect.Message {
	mi := &file_multipass_multipass_proto_msgTypes[60]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeysReply.ProtoReflect.Descriptor instead.
func (*KeysReply) Descriptor() ([]byte, []int) {
	return file_multipass_multipass_proto_rawDescGZIP(), []int{60}
}

func (x *KeysReply) GetLogLine() string {
	if x != nil {
		return x.LogLine
	}
	return ""
}

func (x *KeysReply) GetSettingsKeys() []string {
	if x != nil {
		return x.SettingsKeys
	}
	return nil
}

type AuthenticateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Passphrase     string `protobuf:"bytes,1,opt,name=passphrase,proto3" json:"passphrase,omitempty"`
	VerbosityLevel int32  `protobuf:"varint,2,opt,name=verbosity_level,json=verbosityLevel,proto3" json:"verbosity_level,omitempty"`
}

func (x *AuthenticateRequest) Reset() {
	*x = AuthenticateRequest{}
	mi := &file_multipass_multipass_proto_msgTypes[61]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AuthenticateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthenticateRequest) ProtoMessage() {}

func (x *AuthenticateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_multipass_multipass_proto_msgTypes[61]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthenticateRequest.ProtoReflect.Descriptor instead.
func (*AuthenticateRequest) Descriptor() ([]byte, []int) {
	return file_multipass_multipass_proto_rawDescGZIP(), []int{61}
}

func (x *AuthenticateRequest) GetPassphrase() string {
	if x != nil {
		return x.Passphrase
	}
	return ""
}

func (x *AuthenticateRequest) GetVerbosityLevel() int32 {
	if x != nil {
		return x.VerbosityLevel
	}
	return 0
}

type AuthenticateReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LogLine string `protobuf:"bytes,1,opt,name=log_line,json=logLine,proto3" json:"log_line,omitempty"`
}

func (x *AuthenticateReply) Reset() {
	*x = AuthenticateReply{}
	mi := &file_multipass_multipass_proto_msgTypes[62]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AuthenticateReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthenticateReply) ProtoMessage() {}

func (x *AuthenticateReply) ProtoReflect() protoreflect.Message {
	mi := &file_multipass_multipass_proto_msgTypes[62]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthenticateReply.ProtoReflect.Descriptor instead.
func (*AuthenticateReply) Descriptor() ([]byte, []int) {
	return file_multipass_multipass_proto_rawDescGZIP(), []int{62}
}

func (x *AuthenticateReply) GetLogLine() string {
	if x != nil {
		return x.LogLine
	}
	return ""
}

type SnapshotRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Instance       string `protobuf:"bytes,1,opt,name=instance,proto3" json:"instance,omitempty"`
	Snapshot       string `protobuf:"bytes,2,opt,name=snapshot,proto3" json:"snapshot,omitempty"`
	Comment        string `protobuf:"bytes,3,opt,name=comment,proto3" json:"comment,omitempty"`
	VerbosityLevel int32  `protobuf:"varint,4,opt,name=verbosity_level,json=verbosityLevel,proto3" json:"verbosity_level,omitempty"`
}

func (x *SnapshotRequest) Reset() {
	*x = SnapshotRequest{}
	mi := &file_multipass_multipass_proto_msgTypes[63]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SnapshotRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnapshotRequest) ProtoMessage() {}

func (x *SnapshotRequest) ProtoReflect() protoreflect.Message {
	mi := &file_multipass_multipass_proto_msgTypes[63]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnapshotRequest.ProtoReflect.Descriptor instead.
func (*SnapshotRequest) Descriptor() ([]byte, []int) {
	return file_multipass_multipass_proto_rawDescGZIP(), []int{63}
}

func (x *SnapshotRequest) GetInstance() string {
	if x != nil {
		return x.Instance
	}
	return ""
}

func (x *SnapshotRequest) GetSnapshot() string {
	if x != nil {
		return x.Snapshot
	}
	return ""
}

func (x *SnapshotRequest) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *SnapshotRequest) GetVerbosityLevel() int32 {
	if x != nil {
		return x.VerbosityLevel
	}
	return 0
}

type SnapshotReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Snapshot string `protobuf:"bytes,1,opt,name=snapshot,proto3" json:"snapshot,omitempty"` // automatically generated unless specifically requested
	LogLine  string `protobuf:"bytes,2,opt,name=log_line,json=logLine,proto3" json:"log_line,omitempty"`
}

func (x *SnapshotReply) Reset() {
	*x = SnapshotReply{}
	mi := &file_multipass_multipass_proto_msgTypes[64]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SnapshotReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnapshotReply) ProtoMessage() {}

func (x *SnapshotReply) ProtoReflect() protoreflect.Message {
	mi := &file_multipass_multipass_proto_msgTypes[64]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnapshotReply.ProtoReflect.Descriptor instead.
func (*SnapshotReply) Descriptor() ([]byte, []int) {
	return file_multipass_multipass_proto_rawDescGZIP(), []int{64}
}

func (x *SnapshotReply) GetSnapshot() string {
	if x != nil {
		return x.Snapshot
	}
	return ""
}

func (x *SnapshotReply) GetLogLine() string {
	if x != nil {
		return x.LogLine
	}
	return ""
}

type RestoreRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Instance       string `protobuf:"bytes,1,opt,name=instance,proto3" json:"instance,omitempty"`
	Snapshot       string `protobuf:"bytes,2,opt,name=snapshot,proto3" json:"snapshot,omitempty"`
	Destructive    bool   `protobuf:"varint,3,opt,name=destructive,proto3" json:"destructive,omitempty"`
	VerbosityLevel int32  `protobuf:"varint,4,opt,name=verbosity_level,json=verbosityLevel,proto3" json:"verbosity_level,omitempty"`
}

func (x *RestoreRequest) Reset() {
	*x = RestoreRequest{}
	mi := &file_multipass_multipass_proto_msgTypes[65]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RestoreRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RestoreRequest) ProtoMessage() {}

func (x *RestoreRequest) ProtoReflect() protoreflect.Message {
	mi := &file_multipass_multipass_proto_msgTypes[65]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RestoreRequest.ProtoReflect.Descriptor instead.
func (*RestoreRequest) Descriptor() ([]byte, []int) {
	return file_multipass_multipass_proto_rawDescGZIP(), []int{65}
}

func (x *RestoreRequest) GetInstance() string {
	if x != nil {
		return x.Instance
	}
	return ""
}

func (x *RestoreRequest) GetSnapshot() string {
	if x != nil {
		return x.Snapshot
	}
	return ""
}

func (x *RestoreRequest) GetDestructive() bool {
	if x != nil {
		return x.Destructive
	}
	return false
}

func (x *RestoreRequest) GetVerbosityLevel() int32 {
	if x != nil {
		return x.VerbosityLevel
	}
	return 0
}

type RestoreReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LogLine            string `protobuf:"bytes,1,opt,name=log_line,json=logLine,proto3" json:"log_line,omitempty"`
	ReplyMessage       string `protobuf:"bytes,2,opt,name=reply_message,json=replyMessage,proto3" json:"reply_message,omitempty"`
	ConfirmDestructive bool   `protobuf:"varint,3,opt,name=confirm_destructive,json=confirmDestructive,proto3" json:"confirm_destructive,omitempty"`
}

func (x *RestoreReply) Reset() {
	*x = RestoreReply{}
	mi := &file_multipass_multipass_proto_msgTypes[66]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RestoreReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RestoreReply) ProtoMessage() {}

func (x *RestoreReply) ProtoReflect() protoreflect.Message {
	mi := &file_multipass_multipass_proto_msgTypes[66]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RestoreReply.ProtoReflect.Descriptor instead.
func (*RestoreReply) Descriptor() ([]byte, []int) {
	return file_multipass_multipass_proto_rawDescGZIP(), []int{66}
}

func (x *RestoreReply) GetLogLine() string {
	if x != nil {
		return x.LogLine
	}
	return ""
}

func (x *RestoreReply) GetReplyMessage() string {
	if x != nil {
		return x.ReplyMessage
	}
	return ""
}

func (x *RestoreReply) GetConfirmDestructive() bool {
	if x != nil {
		return x.ConfirmDestructive
	}
	return false
}

type CloneRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceName      string  `protobuf:"bytes,1,opt,name=source_name,json=sourceName,proto3" json:"source_name,omitempty"`
	DestinationName *string `protobuf:"bytes,2,opt,name=destination_name,json=destinationName,proto3,oneof" json:"destination_name,omitempty"`
	VerbosityLevel  int32   `protobuf:"varint,3,opt,name=verbosity_level,json=verbosityLevel,proto3" json:"verbosity_level,omitempty"`
}

func (x *CloneRequest) Reset() {
	*x = CloneRequest{}
	mi := &file_multipass_multipass_proto_msgTypes[67]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CloneRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloneRequest) ProtoMessage() {}

func (x *CloneRequest) ProtoReflect() protoreflect.Message {
	mi := &file_multipass_multipass_proto_msgTypes[67]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloneRequest.ProtoReflect.Descriptor instead.
func (*CloneRequest) Descriptor() ([]byte, []int) {
	return file_multipass_multipass_proto_rawDescGZIP(), []int{67}
}

func (x *CloneRequest) GetSourceName() string {
	if x != nil {
		return x.SourceName
	}
	return ""
}

func (x *CloneRequest) GetDestinationName() string {
	if x != nil && x.DestinationName != nil {
		return *x.DestinationName
	}
	return ""
}

func (x *CloneRequest) GetVerbosityLevel() int32 {
	if x != nil {
		return x.VerbosityLevel
	}
	return 0
}

type CloneReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReplyMessage string `protobuf:"bytes,1,opt,name=reply_message,json=replyMessage,proto3" json:"reply_message,omitempty"`
	LogLine      string `protobuf:"bytes,2,opt,name=log_line,json=logLine,proto3" json:"log_line,omitempty"`
}

func (x *CloneReply) Reset() {
	*x = CloneReply{}
	mi := &file_multipass_multipass_proto_msgTypes[68]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CloneReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloneReply) ProtoMessage() {}

func (x *CloneReply) ProtoReflect() protoreflect.Message {
	mi := &file_multipass_multipass_proto_msgTypes[68]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloneReply.ProtoReflect.Descriptor instead.
func (*CloneReply) Descriptor() ([]byte, []int) {
	return file_multipass_multipass_proto_rawDescGZIP(), []int{68}
}

func (x *CloneReply) GetReplyMessage() string {
	if x != nil {
		return x.ReplyMessage
	}
	return ""
}

func (x *CloneReply) GetLogLine() string {
	if x != nil {
		return x.LogLine
	}
	return ""
}

type DaemonInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VerbosityLevel int32 `protobuf:"varint,1,opt,name=verbosity_level,json=verbosityLevel,proto3" json:"verbosity_level,omitempty"`
}

func (x *DaemonInfoRequest) Reset() {
	*x = DaemonInfoRequest{}
	mi := &file_multipass_multipass_proto_msgTypes[69]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DaemonInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DaemonInfoRequest) ProtoMessage() {}

func (x *DaemonInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_multipass_multipass_proto_msgTypes[69]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DaemonInfoRequest.ProtoReflect.Descriptor instead.
func (*DaemonInfoRequest) Descriptor() ([]byte, []int) {
	return file_multipass_multipass_proto_rawDescGZIP(), []int{69}
}

func (x *DaemonInfoRequest) GetVerbosityLevel() int32 {
	if x != nil {
		return x.VerbosityLevel
	}
	return 0
}

type DaemonInfoReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LogLine        string `protobuf:"bytes,1,opt,name=log_line,json=logLine,proto3" json:"log_line,omitempty"`
	AvailableSpace uint64 `protobuf:"varint,2,opt,name=available_space,json=availableSpace,proto3" json:"available_space,omitempty"`
}

func (x *DaemonInfoReply) Reset() {
	*x = DaemonInfoReply{}
	mi := &file_multipass_multipass_proto_msgTypes[70]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DaemonInfoReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DaemonInfoReply) ProtoMessage() {}

func (x *DaemonInfoReply) ProtoReflect() protoreflect.Message {
	mi := &file_multipass_multipass_proto_msgTypes[70]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DaemonInfoReply.ProtoReflect.Descriptor instead.
func (*DaemonInfoReply) Descriptor() ([]byte, []int) {
	return file_multipass_multipass_proto_rawDescGZIP(), []int{70}
}

func (x *DaemonInfoReply) GetLogLine() string {
	if x != nil {
		return x.LogLine
	}
	return ""
}

func (x *DaemonInfoReply) GetAvailableSpace() uint64 {
	if x != nil {
		return x.AvailableSpace
	}
	return 0
}

type LaunchRequest_NetworkOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         string                            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Mode       LaunchRequest_NetworkOptions_Mode `protobuf:"varint,2,opt,name=mode,proto3,enum=multipass.LaunchRequest_NetworkOptions_Mode" json:"mode,omitempty"`
	MacAddress string                            `protobuf:"bytes,3,opt,name=mac_address,json=macAddress,proto3" json:"mac_address,omitempty"`
}

func (x *LaunchRequest_NetworkOptions) Reset() {
	*x = LaunchRequest_NetworkOptions{}
	mi := &file_multipass_multipass_proto_msgTypes[71]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LaunchRequest_NetworkOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LaunchRequest_NetworkOptions) ProtoMessage() {}

func (x *LaunchRequest_NetworkOptions) ProtoReflect() protoreflect.Message {
	mi := &file_multipass_multipass_proto_msgTypes[71]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LaunchRequest_NetworkOptions.ProtoReflect.Descriptor instead.
func (*LaunchRequest_NetworkOptions) Descriptor() ([]byte, []int) {
	return file_multipass_multipass_proto_rawDescGZIP(), []int{0, 0}
}

func (x *LaunchRequest_NetworkOptions) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *LaunchRequest_NetworkOptions) GetMode() LaunchRequest_NetworkOptions_Mode {
	if x != nil {
		return x.Mode
	}
	return LaunchRequest_NetworkOptions_AUTO
}

func (x *LaunchRequest_NetworkOptions) GetMacAddress() string {
	if x != nil {
		return x.MacAddress
	}
	return ""
}

type LaunchReply_Alias struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name             string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Instance         string `protobuf:"bytes,2,opt,name=instance,proto3" json:"instance,omitempty"`
	Command          string `protobuf:"bytes,3,opt,name=command,proto3" json:"command,omitempty"`
	WorkingDirectory string `protobuf:"bytes,4,opt,name=working_directory,json=workingDirectory,proto3" json:"working_directory,omitempty"`
}

func (x *LaunchReply_Alias) Reset() {
	*x = LaunchReply_Alias{}
	mi := &file_multipass_multipass_proto_msgTypes[72]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LaunchReply_Alias) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LaunchReply_Alias) ProtoMessage() {}

func (x *LaunchReply_Alias) ProtoReflect() protoreflect.Message {
	mi := &file_multipass_multipass_proto_msgTypes[72]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LaunchReply_Alias.ProtoReflect.Descriptor instead.
func (*LaunchReply_Alias) Descriptor() ([]byte, []int) {
	return file_multipass_multipass_proto_rawDescGZIP(), []int{4, 0}
}

func (x *LaunchReply_Alias) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *LaunchReply_Alias) GetInstance() string {
	if x != nil {
		return x.Instance
	}
	return ""
}

func (x *LaunchReply_Alias) GetCommand() string {
	if x != nil {
		return x.Command
	}
	return ""
}

func (x *LaunchReply_Alias) GetWorkingDirectory() string {
	if x != nil {
		return x.WorkingDirectory
	}
	return ""
}

type FindReply_AliasInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RemoteName string `protobuf:"bytes,1,opt,name=remote_name,json=remoteName,proto3" json:"remote_name,omitempty"`
	Alias      string `protobuf:"bytes,2,opt,name=alias,proto3" json:"alias,omitempty"`
}

func (x *FindReply_AliasInfo) Reset() {
	*x = FindReply_AliasInfo{}
	mi := &file_multipass_multipass_proto_msgTypes[73]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FindReply_AliasInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindReply_AliasInfo) ProtoMessage() {}

func (x *FindReply_AliasInfo) ProtoReflect() protoreflect.Message {
	mi := &file_multipass_multipass_proto_msgTypes[73]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindReply_AliasInfo.ProtoReflect.Descriptor instead.
func (*FindReply_AliasInfo) Descriptor() ([]byte, []int) {
	return file_multipass_multipass_proto_rawDescGZIP(), []int{8, 0}
}

func (x *FindReply_AliasInfo) GetRemoteName() string {
	if x != nil {
		return x.RemoteName
	}
	return ""
}

func (x *FindReply_AliasInfo) GetAlias() string {
	if x != nil {
		return x.Alias
	}
	return ""
}

type FindReply_ImageInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Os          string                 `protobuf:"bytes,1,opt,name=os,proto3" json:"os,omitempty"`
	Release     string                 `protobuf:"bytes,2,opt,name=release,proto3" json:"release,omitempty"`
	Version     string                 `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
	AliasesInfo []*FindReply_AliasInfo `protobuf:"bytes,4,rep,name=aliases_info,json=aliasesInfo,proto3" json:"aliases_info,omitempty"`
	Codename    string                 `protobuf:"bytes,5,opt,name=codename,proto3" json:"codename,omitempty"`
}

func (x *FindReply_ImageInfo) Reset() {
	*x = FindReply_ImageInfo{}
	mi := &file_multipass_multipass_proto_msgTypes[74]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FindReply_ImageInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindReply_ImageInfo) ProtoMessage() {}

func (x *FindReply_ImageInfo) ProtoReflect() protoreflect.Message {
	mi := &file_multipass_multipass_proto_msgTypes[74]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindReply_ImageInfo.ProtoReflect.Descriptor instead.
func (*FindReply_ImageInfo) Descriptor() ([]byte, []int) {
	return file_multipass_multipass_proto_rawDescGZIP(), []int{8, 1}
}

func (x *FindReply_ImageInfo) GetOs() string {
	if x != nil {
		return x.Os
	}
	return ""
}

func (x *FindReply_ImageInfo) GetRelease() string {
	if x != nil {
		return x.Release
	}
	return ""
}

func (x *FindReply_ImageInfo) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *FindReply_ImageInfo) GetAliasesInfo() []*FindReply_AliasInfo {
	if x != nil {
		return x.AliasesInfo
	}
	return nil
}

func (x *FindReply_ImageInfo) GetCodename() string {
	if x != nil {
		return x.Codename
	}
	return ""
}

type MountInfo_MountPaths struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourcePath string     `protobuf:"bytes,1,opt,name=source_path,json=sourcePath,proto3" json:"source_path,omitempty"`
	TargetPath string     `protobuf:"bytes,2,opt,name=target_path,json=targetPath,proto3" json:"target_path,omitempty"`
	MountMaps  *MountMaps `protobuf:"bytes,3,opt,name=mount_maps,json=mountMaps,proto3" json:"mount_maps,omitempty"`
}

func (x *MountInfo_MountPaths) Reset() {
	*x = MountInfo_MountPaths{}
	mi := &file_multipass_multipass_proto_msgTypes[75]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MountInfo_MountPaths) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MountInfo_MountPaths) ProtoMessage() {}

func (x *MountInfo_MountPaths) ProtoReflect() protoreflect.Message {
	mi := &file_multipass_multipass_proto_msgTypes[75]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MountInfo_MountPaths.ProtoReflect.Descriptor instead.
func (*MountInfo_MountPaths) Descriptor() ([]byte, []int) {
	return file_multipass_multipass_proto_rawDescGZIP(), []int{13, 0}
}

func (x *MountInfo_MountPaths) GetSourcePath() string {
	if x != nil {
		return x.SourcePath
	}
	return ""
}

func (x *MountInfo_MountPaths) GetTargetPath() string {
	if x != nil {
		return x.TargetPath
	}
	return ""
}

func (x *MountInfo_MountPaths) GetMountMaps() *MountMaps {
	if x != nil {
		return x.MountMaps
	}
	return nil
}

var File_multipass_multipass_proto protoreflect.FileDescriptor

var file_multipass_multipass_proto_rawDesc = []byte{
	0x0a, 0x19, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x73, 0x73, 0x2f, 0x6d, 0x75, 0x6c, 0x74,
	0x69, 0x70, 0x61, 0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x6d, 0x75, 0x6c,
	0x74, 0x69, 0x70, 0x61, 0x73, 0x73, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb8, 0x05, 0x0a, 0x0d, 0x4c, 0x61, 0x75, 0x6e,
	0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6b, 0x65, 0x72, 0x6e, 0x65,
	0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x75, 0x6d, 0x5f, 0x63, 0x6f, 0x72,
	0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6e, 0x75, 0x6d, 0x43, 0x6f, 0x72,
	0x65, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x65, 0x6d, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x6d, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x64, 0x69, 0x73, 0x6b, 0x53, 0x70, 0x61, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x74, 0x69, 0x6d, 0x65, 0x5a, 0x6f, 0x6e, 0x65, 0x12, 0x2f, 0x0a, 0x14, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x6e,
	0x69, 0x74, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x76,
	0x65, 0x72, 0x62, 0x6f, 0x73, 0x69, 0x74, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x76, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x69, 0x74, 0x79, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x12, 0x50, 0x0a, 0x0f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x73, 0x73, 0x2e, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x6f, 0x5f, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x54, 0x6f, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x1a, 0xa1,
	0x01, 0x0a, 0x0e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x40, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x2c, 0x2e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x73, 0x73, 0x2e, 0x4c, 0x61, 0x75, 0x6e,
	0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6d,
	0x6f, 0x64, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x61, 0x63, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x22, 0x1c, 0x0a, 0x04, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x08, 0x0a, 0x04,
	0x41, 0x55, 0x54, 0x4f, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x41, 0x4e, 0x55, 0x41, 0x4c,
	0x10, 0x01, 0x22, 0xbf, 0x01, 0x0a, 0x0b, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x12, 0x42, 0x0a, 0x0b, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70,
	0x61, 0x73, 0x73, 0x2e, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x2e,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x0a, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x22, 0x6c, 0x0a, 0x0a, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43,
	0x6f, 0x64, 0x65, 0x73, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10,
	0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x4d, 0x45, 0x4d, 0x5f, 0x53, 0x49, 0x5a, 0x45,
	0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x44, 0x49,
	0x53, 0x4b, 0x5f, 0x53, 0x49, 0x5a, 0x45, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x49, 0x4e, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x5f, 0x48, 0x4f, 0x53, 0x54, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x03, 0x12,
	0x13, 0x0a, 0x0f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f,
	0x52, 0x4b, 0x10, 0x04, 0x22, 0xba, 0x01, 0x0a, 0x0e, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x50,
	0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x3b, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x73,
	0x73, 0x2e, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x2e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x5f,
	0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x22,
	0x40, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x73,
	0x12, 0x09, 0x0a, 0x05, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x45,
	0x58, 0x54, 0x52, 0x41, 0x43, 0x54, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x56, 0x45, 0x52, 0x49,
	0x46, 0x59, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x57, 0x41, 0x49, 0x54, 0x49, 0x4e, 0x47, 0x10,
	0x03, 0x22, 0x70, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x97, 0x05, 0x0a, 0x0b, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x2a, 0x0a, 0x10, 0x76, 0x6d, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x0e, 0x76, 0x6d, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x44, 0x0a, 0x0f, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x75, 0x6c, 0x74, 0x69,
	0x70, 0x61, 0x73, 0x73, 0x2e, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x50, 0x72, 0x6f, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x48, 0x00, 0x52, 0x0e, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x50, 0x72, 0x6f,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x27, 0x0a, 0x0e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x19,
	0x0a, 0x08, 0x6c, 0x6f, 0x67, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6c, 0x6f, 0x67, 0x4c, 0x69, 0x6e, 0x65, 0x12, 0x36, 0x0a, 0x0b, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x73, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x6e, 0x65, 0x74, 0x73, 0x5f, 0x6e,
	0x65, 0x65, 0x64, 0x5f, 0x62, 0x72, 0x69, 0x64, 0x67, 0x69, 0x6e, 0x67, 0x18, 0x09, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x10, 0x6e, 0x65, 0x74, 0x73, 0x4e, 0x65, 0x65, 0x64, 0x42, 0x72, 0x69, 0x64,
	0x67, 0x69, 0x6e, 0x67, 0x12, 0x4f, 0x0a, 0x15, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x73, 0x5f,
	0x74, 0x6f, 0x5f, 0x62, 0x65, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0a, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x73, 0x73, 0x2e,
	0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x41, 0x6c, 0x69, 0x61,
	0x73, 0x52, 0x12, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x73, 0x54, 0x6f, 0x42, 0x65, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x37, 0x0a, 0x18, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x62, 0x65, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x15, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x73, 0x54, 0x6f, 0x42, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x2d,
	0x0a, 0x12, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x70, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x1a, 0x7e, 0x0a,
	0x05, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x12, 0x2b, 0x0a, 0x11, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x77, 0x6f, 0x72,
	0x6b, 0x69, 0x6e, 0x67, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x42, 0x0e, 0x0a,
	0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x22, 0x37, 0x0a,
	0x0c, 0x50, 0x75, 0x72, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a,
	0x0f, 0x76, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x69, 0x74, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x76, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x69, 0x74,
	0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0x52, 0x0a, 0x0a, 0x50, 0x75, 0x72, 0x67, 0x65, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x6f, 0x67, 0x5f, 0x6c, 0x69, 0x6e, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x6f, 0x67, 0x4c, 0x69, 0x6e, 0x65, 0x12,
	0x29, 0x0a, 0x10, 0x70, 0x75, 0x72, 0x67, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x75, 0x72, 0x67, 0x65,
	0x64, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x22, 0xba, 0x02, 0x0a, 0x0b, 0x46,
	0x69, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12,
	0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x27, 0x0a, 0x0f, 0x76, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x69, 0x74, 0x79, 0x5f, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x76, 0x65, 0x72, 0x62, 0x6f,
	0x73, 0x69, 0x74, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x2b, 0x0a, 0x11, 0x61, 0x6c, 0x6c,
	0x6f, 0x77, 0x5f, 0x75, 0x6e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x55, 0x6e, 0x73, 0x75, 0x70,
	0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x73, 0x68, 0x6f,
	0x77, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x68, 0x6f, 0x77, 0x5f,
	0x62, 0x6c, 0x75, 0x65, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0e, 0x73, 0x68, 0x6f, 0x77, 0x42, 0x6c, 0x75, 0x65, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x73,
	0x12, 0x45, 0x0a, 0x1f, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x69, 0x66, 0x65,
	0x73, 0x74, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x6c,
	0x6f, 0x61, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1c, 0x66, 0x6f, 0x72, 0x63, 0x65,
	0x4d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x44,
	0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0xef, 0x03, 0x0a, 0x09, 0x46, 0x69, 0x6e, 0x64,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x73, 0x68, 0x6f, 0x77,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x62,
	0x6c, 0x75, 0x65, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0e, 0x73, 0x68, 0x6f, 0x77, 0x42, 0x6c, 0x75, 0x65, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x73, 0x12,
	0x3f, 0x0a, 0x0b, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x73, 0x73,
	0x2e, 0x46, 0x69, 0x6e, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x47, 0x0a, 0x0f, 0x62, 0x6c, 0x75, 0x65, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x73, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6d, 0x75, 0x6c, 0x74,
	0x69, 0x70, 0x61, 0x73, 0x73, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x62, 0x6c, 0x75, 0x65, 0x70,
	0x72, 0x69, 0x6e, 0x74, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x6f, 0x67,
	0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x6f, 0x67,
	0x4c, 0x69, 0x6e, 0x65, 0x1a, 0x42, 0x0a, 0x09, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x1a, 0xae, 0x01, 0x0a, 0x09, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x6f, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x0c, 0x61, 0x6c,
	0x69, 0x61, 0x73, 0x65, 0x73, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x73, 0x73, 0x2e, 0x46, 0x69, 0x6e,
	0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x0b, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a,
	0x08, 0x63, 0x6f, 0x64, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x63, 0x6f, 0x64, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x77, 0x0a, 0x14, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x50, 0x61, 0x69,
	0x72, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0d, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68,
	0x6f, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x0c, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01,
	0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x22, 0xe3, 0x01, 0x0a, 0x0b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x57, 0x0a, 0x17, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x73,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x70, 0x61, 0x69, 0x72, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x73, 0x73, 0x2e,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x50, 0x61, 0x69, 0x72, 0x52, 0x15, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x50, 0x61, 0x69, 0x72, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x76,
	0x65, 0x72, 0x62, 0x6f, 0x73, 0x69, 0x74, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x76, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x69, 0x74, 0x79, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x12, 0x34, 0x0a, 0x16, 0x6e, 0x6f, 0x5f, 0x72, 0x75, 0x6e, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x6e, 0x6f, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x73,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x22, 0x41, 0x0a, 0x05, 0x49, 0x64, 0x4d, 0x61,
	0x70, 0x12, 0x17, 0x0a, 0x07, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x68, 0x6f, 0x73, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x22, 0x75, 0x0a, 0x09, 0x4d,
	0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x73, 0x12, 0x33, 0x0a, 0x0c, 0x75, 0x69, 0x64, 0x5f,
	0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x73, 0x73, 0x2e, 0x49, 0x64, 0x4d, 0x61, 0x70,
	0x52, 0x0b, 0x75, 0x69, 0x64, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x33, 0x0a,
	0x0c, 0x67, 0x69, 0x64, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x73, 0x73, 0x2e,
	0x49, 0x64, 0x4d, 0x61, 0x70, 0x52, 0x0b, 0x67, 0x69, 0x64, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e,
	0x67, 0x73, 0x22, 0xfd, 0x01, 0x0a, 0x09, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x28, 0x0a, 0x10, 0x6c, 0x6f, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68,
	0x5f, 0x6c, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6c, 0x6f, 0x6e, 0x67,
	0x65, 0x73, 0x74, 0x50, 0x61, 0x74, 0x68, 0x4c, 0x65, 0x6e, 0x12, 0x40, 0x0a, 0x0b, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x73, 0x73, 0x2e, 0x4d, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x61, 0x74, 0x68, 0x73,
	0x52, 0x0a, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x61, 0x74, 0x68, 0x73, 0x1a, 0x83, 0x01, 0x0a,
	0x0a, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x61, 0x74, 0x68, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1f, 0x0a, 0x0b,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x61, 0x74, 0x68, 0x12, 0x33, 0x0a,
	0x0a, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x70, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x73, 0x73, 0x2e, 0x4d, 0x6f,
	0x75, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x73, 0x52, 0x09, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x61,
	0x70, 0x73, 0x22, 0xdc, 0x01, 0x0a, 0x0e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x38, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x73,
	0x73, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22,
	0x8f, 0x01, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x55, 0x4e, 0x4e, 0x49,
	0x4e, 0x47, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x54, 0x41, 0x52, 0x54, 0x49, 0x4e, 0x47,
	0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x52, 0x45, 0x53, 0x54, 0x41, 0x52, 0x54, 0x49, 0x4e, 0x47,
	0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x54, 0x4f, 0x50, 0x50, 0x45, 0x44, 0x10, 0x04, 0x12,
	0x0b, 0x0a, 0x07, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x05, 0x12, 0x14, 0x0a, 0x10,
	0x44, 0x45, 0x4c, 0x41, 0x59, 0x45, 0x44, 0x5f, 0x53, 0x48, 0x55, 0x54, 0x44, 0x4f, 0x57, 0x4e,
	0x10, 0x06, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x55, 0x53, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47,
	0x10, 0x07, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x55, 0x53, 0x50, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x10,
	0x08, 0x22, 0xa9, 0x03, 0x0a, 0x0f, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x72,
	0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x6c, 0x65,
	0x61, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x65, 0x6d, 0x6f, 0x72,
	0x79, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d,
	0x65, 0x6d, 0x6f, 0x72, 0x79, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x69,
	0x73, 0x6b, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x64, 0x69, 0x73, 0x6b, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x70, 0x76,
	0x34, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x69, 0x70, 0x76, 0x34, 0x12, 0x12, 0x0a,
	0x04, 0x69, 0x70, 0x76, 0x36, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x69, 0x70, 0x76,
	0x36, 0x12, 0x28, 0x0a, 0x0d, 0x6e, 0x75, 0x6d, 0x5f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x0c, 0x6e, 0x75, 0x6d, 0x53,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x09, 0x63,
	0x70, 0x75, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x63, 0x70, 0x75, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x70, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x70, 0x74, 0x69, 0x6d, 0x65,
	0x12, 0x49, 0x0a, 0x12, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x11, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x10, 0x0a, 0x0e, 0x5f,
	0x6e, 0x75, 0x6d, 0x5f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x22, 0xb8, 0x01,
	0x0a, 0x14, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x46, 0x75, 0x6e, 0x64, 0x61, 0x6d,
	0x65, 0x6e, 0x74, 0x61, 0x6c, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68,
	0x6f, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x49, 0x0a,
	0x12, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x11, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x86, 0x01, 0x0a, 0x0f, 0x53, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x43, 0x0a, 0x0c,
	0x66, 0x75, 0x6e, 0x64, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x73, 0x73, 0x2e, 0x53,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x46, 0x75, 0x6e, 0x64, 0x61, 0x6d, 0x65, 0x6e, 0x74,
	0x61, 0x6c, 0x73, 0x52, 0x0c, 0x66, 0x75, 0x6e, 0x64, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c,
	0x73, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65,
	0x6e, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65,
	0x6e, 0x22, 0x92, 0x03, 0x0a, 0x10, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x49, 0x6e,
	0x66, 0x6f, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x42, 0x0a, 0x0f, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x73, 0x73, 0x2e,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0e,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x21,
	0x0a, 0x0c, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x69, 0x73, 0x6b, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x12, 0x1b, 0x0a, 0x09, 0x63, 0x70, 0x75, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x70, 0x75, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x33, 0x0a,
	0x0a, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x73, 0x73, 0x2e, 0x4d, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x41, 0x0a, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x75, 0x6c, 0x74,
	0x69, 0x70, 0x61, 0x73, 0x73, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x48, 0x00, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x41, 0x0a, 0x0d, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d,
	0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x73, 0x73, 0x2e, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x0c, 0x0a, 0x0a, 0x65, 0x78, 0x74, 0x72,
	0x61, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0xb3, 0x01, 0x0a, 0x09, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x35, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x73,
	0x73, 0x2e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x49, 0x74,
	0x65, 0x6d, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x73,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09,
	0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x6f, 0x67,
	0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x6f, 0x67,
	0x4c, 0x69, 0x6e, 0x65, 0x12, 0x36, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x75, 0x6c, 0x74,
	0x69, 0x70, 0x61, 0x73, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x77, 0x0a, 0x0b,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x76,
	0x65, 0x72, 0x62, 0x6f, 0x73, 0x69, 0x74, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x76, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x69, 0x74, 0x79, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x70,
	0x76, 0x34, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x49, 0x70, 0x76, 0x34, 0x22, 0xb9, 0x01, 0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x4d,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x42, 0x0a, 0x0f,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x73,
	0x73, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x0e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x69, 0x70, 0x76, 0x34, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04,
	0x69, 0x70, 0x76, 0x34, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x70, 0x76, 0x36, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x04, 0x69, 0x70, 0x76, 0x36, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x22, 0x69, 0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x4d, 0x53, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x43, 0x0a, 0x0c, 0x66, 0x75, 0x6e, 0x64, 0x61,
	0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x73, 0x73, 0x2e, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68,
	0x6f, 0x74, 0x46, 0x75, 0x6e, 0x64, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x73, 0x52, 0x0c,
	0x66, 0x75, 0x6e, 0x64, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x73, 0x22, 0x48, 0x0a, 0x0d,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x37, 0x0a,
	0x09, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x73, 0x73, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x56, 0x4d, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x09, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x22, 0x48, 0x0a, 0x0d, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68,
	0x6f, 0x74, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x09, 0x73, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x75, 0x6c,
	0x74, 0x69, 0x70, 0x61, 0x73, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x4d, 0x53, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x09, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73,
	0x22, 0xf1, 0x01, 0x0a, 0x09, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x3f,
	0x0a, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x73,
	0x73, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x48,
	0x00, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x3f, 0x0a, 0x0d, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61,
	0x73, 0x73, 0x2e, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x4c, 0x69, 0x73, 0x74,
	0x48, 0x00, 0x52, 0x0c, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x19, 0x0a, 0x08, 0x6c, 0x6f, 0x67, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6c, 0x6f, 0x67, 0x4c, 0x69, 0x6e, 0x65, 0x12, 0x36, 0x0a, 0x0b, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x73, 0x73, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x42, 0x0f, 0x0a, 0x0d, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x73, 0x22, 0x3a, 0x0a, 0x0f, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x76, 0x65, 0x72, 0x62, 0x6f,
	0x73, 0x69, 0x74, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0e, 0x76, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x69, 0x74, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x22, 0x58, 0x0a, 0x0c, 0x4e, 0x65, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x9b, 0x01, 0x0a, 0x0d, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x37, 0x0a, 0x0a,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x73, 0x73, 0x2e, 0x4e, 0x65, 0x74,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x6f, 0x67, 0x5f, 0x6c, 0x69, 0x6e,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x6f, 0x67, 0x4c, 0x69, 0x6e, 0x65,
	0x12, 0x36, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x73,
	0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x56, 0x0a, 0x0e, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x50, 0x61, 0x74, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x61, 0x74, 0x68,
	0x22, 0xcf, 0x02, 0x0a, 0x0c, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x61,
	0x74, 0x68, 0x12, 0x3c, 0x0a, 0x0c, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x70, 0x61, 0x74,
	0x68, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x75, 0x6c, 0x74, 0x69,
	0x70, 0x61, 0x73, 0x73, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x61, 0x74, 0x68, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x61, 0x74, 0x68, 0x73,
	0x12, 0x33, 0x0a, 0x0a, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x70, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x73, 0x73,
	0x2e, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x73, 0x52, 0x09, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x4d, 0x61, 0x70, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x76, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x69,
	0x74, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e,
	0x76, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x69, 0x74, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x40,
	0x0a, 0x0a, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x21, 0x2e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x73, 0x73, 0x2e, 0x4d,
	0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x6f, 0x75, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x24, 0x0a, 0x09,
	0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x4c, 0x41,
	0x53, 0x53, 0x49, 0x43, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x41, 0x54, 0x49, 0x56, 0x45,
	0x10, 0x01, 0x22, 0x7b, 0x0a, 0x0a, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x19, 0x0a, 0x08, 0x6c, 0x6f, 0x67, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6c, 0x6f, 0x67, 0x4c, 0x69, 0x6e, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x72,
	0x65, 0x70, 0x6c, 0x79, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x2d, 0x0a, 0x12, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x22,
	0x0d, 0x0a, 0x0b, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x0b,
	0x0a, 0x09, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x34, 0x0a, 0x0d, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x22, 0x7a, 0x0a, 0x0e, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x0e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x75,
	0x6c, 0x74, 0x69, 0x70, 0x61, 0x73, 0x73, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x52, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x76, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x69, 0x74,
	0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x76,
	0x65, 0x72, 0x62, 0x6f, 0x73, 0x69, 0x74, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0x29, 0x0a,
	0x0c, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x19, 0x0a,
	0x08, 0x6c, 0x6f, 0x67, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6c, 0x6f, 0x67, 0x4c, 0x69, 0x6e, 0x65, 0x22, 0x5e, 0x0a, 0x0e, 0x53, 0x53, 0x48, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x27, 0x0a, 0x0f, 0x76, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x69, 0x74, 0x79, 0x5f, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x76, 0x65, 0x72, 0x62, 0x6f, 0x73,
	0x69, 0x74, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0x75, 0x0a, 0x07, 0x53, 0x53, 0x48, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x72, 0x69, 0x76, 0x5f,
	0x6b, 0x65, 0x79, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x36, 0x34, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x70, 0x72, 0x69, 0x76, 0x4b, 0x65, 0x79, 0x42, 0x61, 0x73, 0x65, 0x36, 0x34, 0x12,
	0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68,
	0x6f, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x22,
	0xba, 0x01, 0x0a, 0x0c, 0x53, 0x53, 0x48, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x3f, 0x0a, 0x08, 0x73, 0x73, 0x68, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x73, 0x73, 0x2e, 0x53,
	0x53, 0x48, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x53, 0x73, 0x68, 0x49,
	0x6e, 0x66, 0x6f, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x73, 0x73, 0x68, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x6f, 0x67, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x6f, 0x67, 0x4c, 0x69, 0x6e, 0x65, 0x1a, 0x4e, 0x0a, 0x0c,
	0x53, 0x73, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x28,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x73, 0x73, 0x2e, 0x53, 0x53, 0x48, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x8e, 0x02, 0x0a,
	0x0a, 0x53, 0x74, 0x61, 0x72, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x52, 0x0a, 0x0f, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x73, 0x73,
	0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x0e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x1a,
	0x62, 0x0a, 0x13, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x35, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70,
	0x61, 0x73, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0x48, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x44, 0x4f, 0x45, 0x53,
	0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10,
	0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x44,
	0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x03, 0x22, 0xae, 0x01,
	0x0a, 0x0c, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3f,
	0x0a, 0x0e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61,
	0x73, 0x73, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x52, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12,
	0x27, 0x0a, 0x0f, 0x76, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x69, 0x74, 0x79, 0x5f, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x76, 0x65, 0x72, 0x62, 0x6f, 0x73,
	0x69, 0x74, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0xb3,
	0x01, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x19, 0x0a,
	0x08, 0x6c, 0x6f, 0x67, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6c, 0x6f, 0x67, 0x4c, 0x69, 0x6e, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x70, 0x6c,
	0x79, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x36, 0x0a,
	0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x73, 0x73, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2d, 0x0a, 0x12, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x11, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x65, 0x64, 0x22, 0xe2, 0x01, 0x0a, 0x0b, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x0e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6d,
	0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x73, 0x73, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x52, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x69,
	0x6e, 0x75, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x74, 0x69, 0x6d,
	0x65, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x5f, 0x73, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0e, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x53, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77,
	0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x76, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x69, 0x74, 0x79, 0x5f, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x76, 0x65, 0x72, 0x62,
	0x6f, 0x73, 0x69, 0x74, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x6f,
	0x72, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x6f, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09,
	0x66, 0x6f, 0x72, 0x63, 0x65, 0x53, 0x74, 0x6f, 0x70, 0x22, 0x26, 0x0a, 0x09, 0x53, 0x74, 0x6f,
	0x70, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x6f, 0x67, 0x5f, 0x6c, 0x69,
	0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x6f, 0x67, 0x4c, 0x69, 0x6e,
	0x65, 0x22, 0x7a, 0x0a, 0x0e, 0x53, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x0e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x75,
	0x6c, 0x74, 0x69, 0x70, 0x61, 0x73, 0x73, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x52, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x76, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x69, 0x74,
	0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x76,
	0x65, 0x72, 0x62, 0x6f, 0x73, 0x69, 0x74, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0x29, 0x0a,
	0x0c, 0x53, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x19, 0x0a,
	0x08, 0x6c, 0x6f, 0x67, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6c, 0x6f, 0x67, 0x4c, 0x69, 0x6e, 0x65, 0x22, 0xb0, 0x01, 0x0a, 0x0e, 0x52, 0x65, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x0e, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x73, 0x73, 0x2e,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x52, 0x0d, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x0f,
	0x76, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x69, 0x74, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x76, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x69, 0x74, 0x79,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0xb5, 0x01, 0x0a, 0x0c,
	0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x19, 0x0a, 0x08,
	0x6c, 0x6f, 0x67, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6c, 0x6f, 0x67, 0x4c, 0x69, 0x6e, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x70, 0x6c, 0x79,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x72, 0x65, 0x70, 0x6c, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x36, 0x0a, 0x0b,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x73, 0x73, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2d, 0x0a, 0x12, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x11, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x65, 0x64, 0x22, 0xd0, 0x01, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x57, 0x0a, 0x17, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x5f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x70, 0x61, 0x69, 0x72, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61,
	0x73, 0x73, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x50, 0x61, 0x69, 0x72, 0x52, 0x15, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x50, 0x61, 0x69, 0x72, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x70, 0x75, 0x72, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x70,
	0x75, 0x72, 0x67, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x76, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x69, 0x74,
	0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x76,
	0x65, 0x72, 0x62, 0x6f, 0x73, 0x69, 0x74, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x27, 0x0a,
	0x0f, 0x70, 0x75, 0x72, 0x67, 0x65, 0x5f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x70, 0x75, 0x72, 0x67, 0x65, 0x53, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x22, 0x8d, 0x01, 0x0a, 0x0b, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x6f, 0x67, 0x5f, 0x6c, 0x69,
	0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x6f, 0x67, 0x4c, 0x69, 0x6e,
	0x65, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x75, 0x72, 0x67, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x75, 0x72,
	0x67, 0x65, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x18,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x5f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x5f, 0x70, 0x75, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x50,
	0x75, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x22, 0x76, 0x0a, 0x0d, 0x55, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x0c, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x73, 0x73, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x50, 0x61, 0x74, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x50, 0x61, 0x74, 0x68, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x76, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x69,
	0x74, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e,
	0x76, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x69, 0x74, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0x28,
	0x0a, 0x0b, 0x55, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x19, 0x0a,
	0x08, 0x6c, 0x6f, 0x67, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6c, 0x6f, 0x67, 0x4c, 0x69, 0x6e, 0x65, 0x22, 0x39, 0x0a, 0x0e, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x76, 0x65,
	0x72, 0x62, 0x6f, 0x73, 0x69, 0x74, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0e, 0x76, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x69, 0x74, 0x79, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x22, 0x7b, 0x0a, 0x0c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a,
	0x08, 0x6c, 0x6f, 0x67, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6c, 0x6f, 0x67, 0x4c, 0x69, 0x6e, 0x65, 0x12, 0x36, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x73, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x22, 0x47, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x27, 0x0a, 0x0f, 0x76, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x69, 0x74, 0x79, 0x5f, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x76, 0x65, 0x72, 0x62, 0x6f,
	0x73, 0x69, 0x74, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0x3b, 0x0a, 0x08, 0x47, 0x65, 0x74,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6c,
	0x6f, 0x67, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c,
	0x6f, 0x67, 0x4c, 0x69, 0x6e, 0x65, 0x22, 0x79, 0x0a, 0x0a, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x76, 0x61, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x76, 0x61, 0x6c, 0x12, 0x27, 0x0a, 0x0f, 0x76, 0x65, 0x72, 0x62,
	0x6f, 0x73, 0x69, 0x74, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0e, 0x76, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x69, 0x74, 0x79, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65,
	0x64, 0x22, 0x7b, 0x0a, 0x08, 0x53, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x19, 0x0a,
	0x08, 0x6c, 0x6f, 0x67, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6c, 0x6f, 0x67, 0x4c, 0x69, 0x6e, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x70, 0x6c,
	0x79, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2f, 0x0a,
	0x13, 0x6e, 0x65, 0x65, 0x64, 0x73, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x6e, 0x65, 0x65, 0x64,
	0x73, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x36,
	0x0a, 0x0b, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a,
	0x0f, 0x76, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x69, 0x74, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x76, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x69, 0x74,
	0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0x4b, 0x0a, 0x09, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x6f, 0x67, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x6f, 0x67, 0x4c, 0x69, 0x6e, 0x65, 0x12, 0x23,
	0x0a, 0x0d, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x4b,
	0x65, 0x79, 0x73, 0x22, 0x5e, 0x0a, 0x13, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61,
	0x73, 0x73, 0x70, 0x68, 0x72, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x70, 0x61, 0x73, 0x73, 0x70, 0x68, 0x72, 0x61, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x76, 0x65,
	0x72, 0x62, 0x6f, 0x73, 0x69, 0x74, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0e, 0x76, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x69, 0x74, 0x79, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x22, 0x2e, 0x0a, 0x11, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x6f, 0x67, 0x5f,
	0x6c, 0x69, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x6f, 0x67, 0x4c,
	0x69, 0x6e, 0x65, 0x22, 0x8c, 0x01, 0x0a, 0x0f, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x76, 0x65, 0x72,
	0x62, 0x6f, 0x73, 0x69, 0x74, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0e, 0x76, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x69, 0x74, 0x79, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x22, 0x46, 0x0a, 0x0d, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12,
	0x19, 0x0a, 0x08, 0x6c, 0x6f, 0x67, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6c, 0x6f, 0x67, 0x4c, 0x69, 0x6e, 0x65, 0x22, 0x93, 0x01, 0x0a, 0x0e, 0x52,
	0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x76, 0x65, 0x72, 0x62, 0x6f,
	0x73, 0x69, 0x74, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0e, 0x76, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x69, 0x74, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x22, 0x7f, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x19, 0x0a, 0x08, 0x6c, 0x6f, 0x67, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6c, 0x6f, 0x67, 0x4c, 0x69, 0x6e, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x72,
	0x65, 0x70, 0x6c, 0x79, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x2f, 0x0a, 0x13, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x5f, 0x64, 0x65, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x44, 0x65, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x22, 0x9d, 0x01, 0x0a, 0x0c, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x10, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x0f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0f, 0x76, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x69, 0x74, 0x79,
	0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x76, 0x65,
	0x72, 0x62, 0x6f, 0x73, 0x69, 0x74, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x42, 0x13, 0x0a, 0x11,
	0x5f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x22, 0x4c, 0x0a, 0x0a, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x23, 0x0a, 0x0d, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x6f, 0x67, 0x5f, 0x6c, 0x69, 0x6e, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x6f, 0x67, 0x4c, 0x69, 0x6e, 0x65, 0x22,
	0x3c, 0x0a, 0x11, 0x44, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x76, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x69, 0x74,
	0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x76,
	0x65, 0x72, 0x62, 0x6f, 0x73, 0x69, 0x74, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0x55, 0x0a,
	0x0f, 0x44, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x19, 0x0a, 0x08, 0x6c, 0x6f, 0x67, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6c, 0x6f, 0x67, 0x4c, 0x69, 0x6e, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x61,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x53,
	0x70, 0x61, 0x63, 0x65, 0x32, 0xfc, 0x0c, 0x0a, 0x03, 0x52, 0x70, 0x63, 0x12, 0x3e, 0x0a, 0x06,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x18, 0x2e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61,
	0x73, 0x73, 0x2e, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x73, 0x73, 0x2e, 0x4c, 0x61, 0x75,
	0x6e, 0x63, 0x68, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x28, 0x01, 0x30, 0x01, 0x12, 0x3e, 0x0a, 0x06,
	0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x12, 0x18, 0x2e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61,
	0x73, 0x73, 0x2e, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x73, 0x73, 0x2e, 0x4c, 0x61, 0x75,
	0x6e, 0x63, 0x68, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x28, 0x01, 0x30, 0x01, 0x12, 0x3b, 0x0a, 0x05,
	0x70, 0x75, 0x72, 0x67, 0x65, 0x12, 0x17, 0x2e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x73,
	0x73, 0x2e, 0x50, 0x75, 0x72, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15,
	0x2e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x73, 0x73, 0x2e, 0x50, 0x75, 0x72, 0x67, 0x65,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x28, 0x01, 0x30, 0x01, 0x12, 0x38, 0x0a, 0x04, 0x66, 0x69, 0x6e,
	0x64, 0x12, 0x16, 0x2e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x73, 0x73, 0x2e, 0x46, 0x69,
	0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x6d, 0x75, 0x6c, 0x74,
	0x69, 0x70, 0x61, 0x73, 0x73, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x28,
	0x01, 0x30, 0x01, 0x12, 0x38, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x2e, 0x6d, 0x75,
	0x6c, 0x74, 0x69, 0x70, 0x61, 0x73, 0x73, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x73, 0x73, 0x2e,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x28, 0x01, 0x30, 0x01, 0x12, 0x38, 0x0a,
	0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x16, 0x2e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x73,
	0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e,
	0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x73, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x28, 0x01, 0x30, 0x01, 0x12, 0x44, 0x0a, 0x08, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x73, 0x12, 0x1a, 0x2e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x73, 0x73, 0x2e,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x18, 0x2e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x73, 0x73, 0x2e, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x28, 0x01, 0x30, 0x01, 0x12, 0x3b, 0x0a,
	0x05, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x17, 0x2e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61,
	0x73, 0x73, 0x2e, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x15, 0x2e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x73, 0x73, 0x2e, 0x4d, 0x6f, 0x75, 0x6e,
	0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x28, 0x01, 0x30, 0x01, 0x12, 0x34, 0x0a, 0x04, 0x70, 0x69,
	0x6e, 0x67, 0x12, 0x16, 0x2e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x73, 0x73, 0x2e, 0x50,
	0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x6d, 0x75, 0x6c,
	0x74, 0x69, 0x70, 0x61, 0x73, 0x73, 0x2e, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x41, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x19, 0x2e, 0x6d, 0x75,
	0x6c, 0x74, 0x69, 0x70, 0x61, 0x73, 0x73, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61,
	0x73, 0x73, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x28,
	0x01, 0x30, 0x01, 0x12, 0x42, 0x0a, 0x08, 0x73, 0x73, 0x68, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x12,
	0x19, 0x2e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x73, 0x73, 0x2e, 0x53, 0x53, 0x48, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x6d, 0x75, 0x6c,
	0x74, 0x69, 0x70, 0x61, 0x73, 0x73, 0x2e, 0x53, 0x53, 0x48, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x28, 0x01, 0x30, 0x01, 0x12, 0x3b, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x12, 0x17, 0x2e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x73, 0x73, 0x2e, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x6d, 0x75, 0x6c, 0x74,
	0x69, 0x70, 0x61, 0x73, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x28, 0x01, 0x30, 0x01, 0x12, 0x38, 0x0a, 0x04, 0x73, 0x74, 0x6f, 0x70, 0x12, 0x16, 0x2e, 0x6d,
	0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x73, 0x73, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x73, 0x73,
	0x2e, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x28, 0x01, 0x30, 0x01, 0x12, 0x41,
	0x0a, 0x07, 0x73, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x12, 0x19, 0x2e, 0x6d, 0x75, 0x6c, 0x74,
	0x69, 0x70, 0x61, 0x73, 0x73, 0x2e, 0x53, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x73, 0x73,
	0x2e, 0x53, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x28, 0x01, 0x30,
	0x01, 0x12, 0x41, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x19, 0x2e, 0x6d,
	0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x73, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70,
	0x61, 0x73, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x28, 0x01, 0x30, 0x01, 0x12, 0x3d, 0x0a, 0x05, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x12, 0x18, 0x2e,
	0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x73, 0x73, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70,
	0x61, 0x73, 0x73, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x28,
	0x01, 0x30, 0x01, 0x12, 0x3e, 0x0a, 0x06, 0x75, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18, 0x2e,
	0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x73, 0x73, 0x2e, 0x55, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70,
	0x61, 0x73, 0x73, 0x2e, 0x55, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x28,
	0x01, 0x30, 0x01, 0x12, 0x41, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x19,
	0x2e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x73, 0x73, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x6d, 0x75, 0x6c, 0x74,
	0x69, 0x70, 0x61, 0x73, 0x73, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x28, 0x01, 0x30, 0x01, 0x12, 0x35, 0x0a, 0x03, 0x67, 0x65, 0x74, 0x12, 0x15, 0x2e,
	0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x73, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x73, 0x73,
	0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x28, 0x01, 0x30, 0x01, 0x12, 0x35, 0x0a,
	0x03, 0x73, 0x65, 0x74, 0x12, 0x15, 0x2e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x73, 0x73,
	0x2e, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x6d, 0x75,
	0x6c, 0x74, 0x69, 0x70, 0x61, 0x73, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x28, 0x01, 0x30, 0x01, 0x12, 0x38, 0x0a, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x12, 0x16, 0x2e, 0x6d,
	0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x73, 0x73, 0x2e, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x73, 0x73,
	0x2e, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x28, 0x01, 0x30, 0x01, 0x12, 0x50,
	0x0a, 0x0c, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x1e,
	0x2e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x73, 0x73, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65,
	0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c,
	0x2e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x73, 0x73, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65,
	0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x28, 0x01, 0x30, 0x01,
	0x12, 0x44, 0x0a, 0x08, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x1a, 0x2e, 0x6d,
	0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x73, 0x73, 0x2e, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x6d, 0x75, 0x6c, 0x74, 0x69,
	0x70, 0x61, 0x73, 0x73, 0x2e, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x28, 0x01, 0x30, 0x01, 0x12, 0x41, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x12, 0x19, 0x2e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x73, 0x73, 0x2e, 0x52, 0x65,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x6d,
	0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x73, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x28, 0x01, 0x30, 0x01, 0x12, 0x3b, 0x0a, 0x05, 0x63, 0x6c, 0x6f,
	0x6e, 0x65, 0x12, 0x17, 0x2e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x73, 0x73, 0x2e, 0x43,
	0x6c, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x6d, 0x75,
	0x6c, 0x74, 0x69, 0x70, 0x61, 0x73, 0x73, 0x2e, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x28, 0x01, 0x30, 0x01, 0x12, 0x4b, 0x0a, 0x0b, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x2e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x73,
	0x73, 0x2e, 0x44, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x73, 0x73, 0x2e,
	0x44, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x28,
	0x01, 0x30, 0x01, 0x42, 0x0d, 0x5a, 0x0b, 0x2e, 0x2f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61,
	0x73, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_multipass_multipass_proto_rawDescOnce sync.Once
	file_multipass_multipass_proto_rawDescData = file_multipass_multipass_proto_rawDesc
)

func file_multipass_multipass_proto_rawDescGZIP() []byte {
	file_multipass_multipass_proto_rawDescOnce.Do(func() {
		file_multipass_multipass_proto_rawDescData = protoimpl.X.CompressGZIP(file_multipass_multipass_proto_rawDescData)
	})
	return file_multipass_multipass_proto_rawDescData
}

var file_multipass_multipass_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_multipass_multipass_proto_msgTypes = make([]protoimpl.MessageInfo, 78)
var file_multipass_multipass_proto_goTypes = []any{
	(LaunchRequest_NetworkOptions_Mode)(0), // 0: multipass.LaunchRequest.NetworkOptions.Mode
	(LaunchError_ErrorCodes)(0),            // 1: multipass.LaunchError.ErrorCodes
	(LaunchProgress_ProgressTypes)(0),      // 2: multipass.LaunchProgress.ProgressTypes
	(InstanceStatus_Status)(0),             // 3: multipass.InstanceStatus.Status
	(MountRequest_MountType)(0),            // 4: multipass.MountRequest.MountType
	(StartError_ErrorCode)(0),              // 5: multipass.StartError.ErrorCode
	(*LaunchRequest)(nil),                  // 6: multipass.LaunchRequest
	(*LaunchError)(nil),                    // 7: multipass.LaunchError
	(*LaunchProgress)(nil),                 // 8: multipass.LaunchProgress
	(*UpdateInfo)(nil),                     // 9: multipass.UpdateInfo
	(*LaunchReply)(nil),                    // 10: multipass.LaunchReply
	(*PurgeRequest)(nil),                   // 11: multipass.PurgeRequest
	(*PurgeReply)(nil),                     // 12: multipass.PurgeReply
	(*FindRequest)(nil),                    // 13: multipass.FindRequest
	(*FindReply)(nil),                      // 14: multipass.FindReply
	(*InstanceSnapshotPair)(nil),           // 15: multipass.InstanceSnapshotPair
	(*InfoRequest)(nil),                    // 16: multipass.InfoRequest
	(*IdMap)(nil),                          // 17: multipass.IdMap
	(*MountMaps)(nil),                      // 18: multipass.MountMaps
	(*MountInfo)(nil),                      // 19: multipass.MountInfo
	(*InstanceStatus)(nil),                 // 20: multipass.InstanceStatus
	(*InstanceDetails)(nil),                // 21: multipass.InstanceDetails
	(*SnapshotFundamentals)(nil),           // 22: multipass.SnapshotFundamentals
	(*SnapshotDetails)(nil),                // 23: multipass.SnapshotDetails
	(*DetailedInfoItem)(nil),               // 24: multipass.DetailedInfoItem
	(*InfoReply)(nil),                      // 25: multipass.InfoReply
	(*ListRequest)(nil),                    // 26: multipass.ListRequest
	(*ListVMInstance)(nil),                 // 27: multipass.ListVMInstance
	(*ListVMSnapshot)(nil),                 // 28: multipass.ListVMSnapshot
	(*InstancesList)(nil),                  // 29: multipass.InstancesList
	(*SnapshotsList)(nil),                  // 30: multipass.SnapshotsList
	(*ListReply)(nil),                      // 31: multipass.ListReply
	(*NetworksRequest)(nil),                // 32: multipass.NetworksRequest
	(*NetInterface)(nil),                   // 33: multipass.NetInterface
	(*NetworksReply)(nil),                  // 34: multipass.NetworksReply
	(*TargetPathInfo)(nil),                 // 35: multipass.TargetPathInfo
	(*MountRequest)(nil),                   // 36: multipass.MountRequest
	(*MountReply)(nil),                     // 37: multipass.MountReply
	(*PingRequest)(nil),                    // 38: multipass.PingRequest
	(*PingReply)(nil),                      // 39: multipass.PingReply
	(*InstanceNames)(nil),                  // 40: multipass.InstanceNames
	(*RecoverRequest)(nil),                 // 41: multipass.RecoverRequest
	(*RecoverReply)(nil),                   // 42: multipass.RecoverReply
	(*SSHInfoRequest)(nil),                 // 43: multipass.SSHInfoRequest
	(*SSHInfo)(nil),                        // 44: multipass.SSHInfo
	(*SSHInfoReply)(nil),                   // 45: multipass.SSHInfoReply
	(*StartError)(nil),                     // 46: multipass.StartError
	(*StartRequest)(nil),                   // 47: multipass.StartRequest
	(*StartReply)(nil),                     // 48: multipass.StartReply
	(*StopRequest)(nil),                    // 49: multipass.StopRequest
	(*StopReply)(nil),                      // 50: multipass.StopReply
	(*SuspendRequest)(nil),                 // 51: multipass.SuspendRequest
	(*SuspendReply)(nil),                   // 52: multipass.SuspendReply
	(*RestartRequest)(nil),                 // 53: multipass.RestartRequest
	(*RestartReply)(nil),                   // 54: multipass.RestartReply
	(*DeleteRequest)(nil),                  // 55: multipass.DeleteRequest
	(*DeleteReply)(nil),                    // 56: multipass.DeleteReply
	(*UmountRequest)(nil),                  // 57: multipass.UmountRequest
	(*UmountReply)(nil),                    // 58: multipass.UmountReply
	(*VersionRequest)(nil),                 // 59: multipass.VersionRequest
	(*VersionReply)(nil),                   // 60: multipass.VersionReply
	(*GetRequest)(nil),                     // 61: multipass.GetRequest
	(*GetReply)(nil),                       // 62: multipass.GetReply
	(*SetRequest)(nil),                     // 63: multipass.SetRequest
	(*SetReply)(nil),                       // 64: multipass.SetReply
	(*KeysRequest)(nil),                    // 65: multipass.KeysRequest
	(*KeysReply)(nil),                      // 66: multipass.KeysReply
	(*AuthenticateRequest)(nil),            // 67: multipass.AuthenticateRequest
	(*AuthenticateReply)(nil),              // 68: multipass.AuthenticateReply
	(*SnapshotRequest)(nil),                // 69: multipass.SnapshotRequest
	(*SnapshotReply)(nil),                  // 70: multipass.SnapshotReply
	(*RestoreRequest)(nil),                 // 71: multipass.RestoreRequest
	(*RestoreReply)(nil),                   // 72: multipass.RestoreReply
	(*CloneRequest)(nil),                   // 73: multipass.CloneRequest
	(*CloneReply)(nil),                     // 74: multipass.CloneReply
	(*DaemonInfoRequest)(nil),              // 75: multipass.DaemonInfoRequest
	(*DaemonInfoReply)(nil),                // 76: multipass.DaemonInfoReply
	(*LaunchRequest_NetworkOptions)(nil),   // 77: multipass.LaunchRequest.NetworkOptions
	(*LaunchReply_Alias)(nil),              // 78: multipass.LaunchReply.Alias
	(*FindReply_AliasInfo)(nil),            // 79: multipass.FindReply.AliasInfo
	(*FindReply_ImageInfo)(nil),            // 80: multipass.FindReply.ImageInfo
	(*MountInfo_MountPaths)(nil),           // 81: multipass.MountInfo.MountPaths
	nil,                                    // 82: multipass.SSHInfoReply.SshInfoEntry
	nil,                                    // 83: multipass.StartError.InstanceErrorsEntry
	(*timestamppb.Timestamp)(nil),          // 84: google.protobuf.Timestamp
}
var file_multipass_multipass_proto_depIdxs = []int32{
	77, // 0: multipass.LaunchRequest.network_options:type_name -> multipass.LaunchRequest.NetworkOptions
	1,  // 1: multipass.LaunchError.error_codes:type_name -> multipass.LaunchError.ErrorCodes
	2,  // 2: multipass.LaunchProgress.type:type_name -> multipass.LaunchProgress.ProgressTypes
	8,  // 3: multipass.LaunchReply.launch_progress:type_name -> multipass.LaunchProgress
	9,  // 4: multipass.LaunchReply.update_info:type_name -> multipass.UpdateInfo
	78, // 5: multipass.LaunchReply.aliases_to_be_created:type_name -> multipass.LaunchReply.Alias
	80, // 6: multipass.FindReply.images_info:type_name -> multipass.FindReply.ImageInfo
	80, // 7: multipass.FindReply.blueprints_info:type_name -> multipass.FindReply.ImageInfo
	15, // 8: multipass.InfoRequest.instance_snapshot_pairs:type_name -> multipass.InstanceSnapshotPair
	17, // 9: multipass.MountMaps.uid_mappings:type_name -> multipass.IdMap
	17, // 10: multipass.MountMaps.gid_mappings:type_name -> multipass.IdMap
	81, // 11: multipass.MountInfo.mount_paths:type_name -> multipass.MountInfo.MountPaths
	3,  // 12: multipass.InstanceStatus.status:type_name -> multipass.InstanceStatus.Status
	84, // 13: multipass.InstanceDetails.creation_timestamp:type_name -> google.protobuf.Timestamp
	84, // 14: multipass.SnapshotFundamentals.creation_timestamp:type_name -> google.protobuf.Timestamp
	22, // 15: multipass.SnapshotDetails.fundamentals:type_name -> multipass.SnapshotFundamentals
	20, // 16: multipass.DetailedInfoItem.instance_status:type_name -> multipass.InstanceStatus
	19, // 17: multipass.DetailedInfoItem.mount_info:type_name -> multipass.MountInfo
	21, // 18: multipass.DetailedInfoItem.instance_info:type_name -> multipass.InstanceDetails
	23, // 19: multipass.DetailedInfoItem.snapshot_info:type_name -> multipass.SnapshotDetails
	24, // 20: multipass.InfoReply.details:type_name -> multipass.DetailedInfoItem
	9,  // 21: multipass.InfoReply.update_info:type_name -> multipass.UpdateInfo
	20, // 22: multipass.ListVMInstance.instance_status:type_name -> multipass.InstanceStatus
	22, // 23: multipass.ListVMSnapshot.fundamentals:type_name -> multipass.SnapshotFundamentals
	27, // 24: multipass.InstancesList.instances:type_name -> multipass.ListVMInstance
	28, // 25: multipass.SnapshotsList.snapshots:type_name -> multipass.ListVMSnapshot
	29, // 26: multipass.ListReply.instance_list:type_name -> multipass.InstancesList
	30, // 27: multipass.ListReply.snapshot_list:type_name -> multipass.SnapshotsList
	9,  // 28: multipass.ListReply.update_info:type_name -> multipass.UpdateInfo
	33, // 29: multipass.NetworksReply.interfaces:type_name -> multipass.NetInterface
	9,  // 30: multipass.NetworksReply.update_info:type_name -> multipass.UpdateInfo
	35, // 31: multipass.MountRequest.target_paths:type_name -> multipass.TargetPathInfo
	18, // 32: multipass.MountRequest.mount_maps:type_name -> multipass.MountMaps
	4,  // 33: multipass.MountRequest.mount_type:type_name -> multipass.MountRequest.MountType
	40, // 34: multipass.RecoverRequest.instance_names:type_name -> multipass.InstanceNames
	82, // 35: multipass.SSHInfoReply.ssh_info:type_name -> multipass.SSHInfoReply.SshInfoEntry
	83, // 36: multipass.StartError.instance_errors:type_name -> multipass.StartError.InstanceErrorsEntry
	40, // 37: multipass.StartRequest.instance_names:type_name -> multipass.InstanceNames
	9,  // 38: multipass.StartReply.update_info:type_name -> multipass.UpdateInfo
	40, // 39: multipass.StopRequest.instance_names:type_name -> multipass.InstanceNames
	40, // 40: multipass.SuspendRequest.instance_names:type_name -> multipass.InstanceNames
	40, // 41: multipass.RestartRequest.instance_names:type_name -> multipass.InstanceNames
	9,  // 42: multipass.RestartReply.update_info:type_name -> multipass.UpdateInfo
	15, // 43: multipass.DeleteRequest.instance_snapshot_pairs:type_name -> multipass.InstanceSnapshotPair
	35, // 44: multipass.UmountRequest.target_paths:type_name -> multipass.TargetPathInfo
	9,  // 45: multipass.VersionReply.update_info:type_name -> multipass.UpdateInfo
	0,  // 46: multipass.LaunchRequest.NetworkOptions.mode:type_name -> multipass.LaunchRequest.NetworkOptions.Mode
	79, // 47: multipass.FindReply.ImageInfo.aliases_info:type_name -> multipass.FindReply.AliasInfo
	18, // 48: multipass.MountInfo.MountPaths.mount_maps:type_name -> multipass.MountMaps
	44, // 49: multipass.SSHInfoReply.SshInfoEntry.value:type_name -> multipass.SSHInfo
	5,  // 50: multipass.StartError.InstanceErrorsEntry.value:type_name -> multipass.StartError.ErrorCode
	6,  // 51: multipass.Rpc.create:input_type -> multipass.LaunchRequest
	6,  // 52: multipass.Rpc.launch:input_type -> multipass.LaunchRequest
	11, // 53: multipass.Rpc.purge:input_type -> multipass.PurgeRequest
	13, // 54: multipass.Rpc.find:input_type -> multipass.FindRequest
	16, // 55: multipass.Rpc.info:input_type -> multipass.InfoRequest
	26, // 56: multipass.Rpc.list:input_type -> multipass.ListRequest
	32, // 57: multipass.Rpc.networks:input_type -> multipass.NetworksRequest
	36, // 58: multipass.Rpc.mount:input_type -> multipass.MountRequest
	38, // 59: multipass.Rpc.ping:input_type -> multipass.PingRequest
	41, // 60: multipass.Rpc.recover:input_type -> multipass.RecoverRequest
	43, // 61: multipass.Rpc.ssh_info:input_type -> multipass.SSHInfoRequest
	47, // 62: multipass.Rpc.start:input_type -> multipass.StartRequest
	49, // 63: multipass.Rpc.stop:input_type -> multipass.StopRequest
	51, // 64: multipass.Rpc.suspend:input_type -> multipass.SuspendRequest
	53, // 65: multipass.Rpc.restart:input_type -> multipass.RestartRequest
	55, // 66: multipass.Rpc.delet:input_type -> multipass.DeleteRequest
	57, // 67: multipass.Rpc.umount:input_type -> multipass.UmountRequest
	59, // 68: multipass.Rpc.version:input_type -> multipass.VersionRequest
	61, // 69: multipass.Rpc.get:input_type -> multipass.GetRequest
	63, // 70: multipass.Rpc.set:input_type -> multipass.SetRequest
	65, // 71: multipass.Rpc.keys:input_type -> multipass.KeysRequest
	67, // 72: multipass.Rpc.authenticate:input_type -> multipass.AuthenticateRequest
	69, // 73: multipass.Rpc.snapshot:input_type -> multipass.SnapshotRequest
	71, // 74: multipass.Rpc.restore:input_type -> multipass.RestoreRequest
	73, // 75: multipass.Rpc.clone:input_type -> multipass.CloneRequest
	75, // 76: multipass.Rpc.daemon_info:input_type -> multipass.DaemonInfoRequest
	10, // 77: multipass.Rpc.create:output_type -> multipass.LaunchReply
	10, // 78: multipass.Rpc.launch:output_type -> multipass.LaunchReply
	12, // 79: multipass.Rpc.purge:output_type -> multipass.PurgeReply
	14, // 80: multipass.Rpc.find:output_type -> multipass.FindReply
	25, // 81: multipass.Rpc.info:output_type -> multipass.InfoReply
	31, // 82: multipass.Rpc.list:output_type -> multipass.ListReply
	34, // 83: multipass.Rpc.networks:output_type -> multipass.NetworksReply
	37, // 84: multipass.Rpc.mount:output_type -> multipass.MountReply
	39, // 85: multipass.Rpc.ping:output_type -> multipass.PingReply
	42, // 86: multipass.Rpc.recover:output_type -> multipass.RecoverReply
	45, // 87: multipass.Rpc.ssh_info:output_type -> multipass.SSHInfoReply
	48, // 88: multipass.Rpc.start:output_type -> multipass.StartReply
	50, // 89: multipass.Rpc.stop:output_type -> multipass.StopReply
	52, // 90: multipass.Rpc.suspend:output_type -> multipass.SuspendReply
	54, // 91: multipass.Rpc.restart:output_type -> multipass.RestartReply
	56, // 92: multipass.Rpc.delet:output_type -> multipass.DeleteReply
	58, // 93: multipass.Rpc.umount:output_type -> multipass.UmountReply
	60, // 94: multipass.Rpc.version:output_type -> multipass.VersionReply
	62, // 95: multipass.Rpc.get:output_type -> multipass.GetReply
	64, // 96: multipass.Rpc.set:output_type -> multipass.SetReply
	66, // 97: multipass.Rpc.keys:output_type -> multipass.KeysReply
	68, // 98: multipass.Rpc.authenticate:output_type -> multipass.AuthenticateReply
	70, // 99: multipass.Rpc.snapshot:output_type -> multipass.SnapshotReply
	72, // 100: multipass.Rpc.restore:output_type -> multipass.RestoreReply
	74, // 101: multipass.Rpc.clone:output_type -> multipass.CloneReply
	76, // 102: multipass.Rpc.daemon_info:output_type -> multipass.DaemonInfoReply
	77, // [77:103] is the sub-list for method output_type
	51, // [51:77] is the sub-list for method input_type
	51, // [51:51] is the sub-list for extension type_name
	51, // [51:51] is the sub-list for extension extendee
	0,  // [0:51] is the sub-list for field type_name
}

func init() { file_multipass_multipass_proto_init() }
func file_multipass_multipass_proto_init() {
	if File_multipass_multipass_proto != nil {
		return
	}
	file_multipass_multipass_proto_msgTypes[4].OneofWrappers = []any{
		(*LaunchReply_VmInstanceName)(nil),
		(*LaunchReply_LaunchProgress)(nil),
		(*LaunchReply_CreateMessage)(nil),
	}
	file_multipass_multipass_proto_msgTypes[9].OneofWrappers = []any{}
	file_multipass_multipass_proto_msgTypes[15].OneofWrappers = []any{}
	file_multipass_multipass_proto_msgTypes[18].OneofWrappers = []any{
		(*DetailedInfoItem_InstanceInfo)(nil),
		(*DetailedInfoItem_SnapshotInfo)(nil),
	}
	file_multipass_multipass_proto_msgTypes[25].OneofWrappers = []any{
		(*ListReply_InstanceList)(nil),
		(*ListReply_SnapshotList)(nil),
	}
	file_multipass_multipass_proto_msgTypes[67].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_multipass_multipass_proto_rawDesc,
			NumEnums:      6,
			NumMessages:   78,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_multipass_multipass_proto_goTypes,
		DependencyIndexes: file_multipass_multipass_proto_depIdxs,
		EnumInfos:         file_multipass_multipass_proto_enumTypes,
		MessageInfos:      file_multipass_multipass_proto_msgTypes,
	}.Build()
	File_multipass_multipass_proto = out.File
	file_multipass_multipass_proto_rawDesc = nil
	file_multipass_multipass_proto_goTypes = nil
	file_multipass_multipass_proto_depIdxs = nil
}
